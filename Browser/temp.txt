ACLOCAL_PATH=/mingw64/share/aclocal:/usr/share/aclocal
ALLUSERSPROFILE='C:\ProgramData'
APPDATA='C:\Users\richa\AppData\Roaming'
BASH=/usr/bin/bash
BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extquote:force_fignore:globasciiranges:globskipdots:hostcomplete:interactive_comments:login_shell:patsub_replacement:progcomp:promptvars:sourcepath
BASH_ALIASES=()
BASH_ARGC=([0]="0")
BASH_ARGV=()
BASH_CMDS=()
BASH_LINENO=()
BASH_LOADABLES_PATH=/usr/local/lib/bash:/usr/lib/bash:/opt/local/lib/bash:/usr/pkg/lib/bash:/opt/pkg/lib/bash:.
BASH_SOURCE=()
BASH_VERSINFO=([0]="5" [1]="2" [2]="37" [3]="1" [4]="release" [5]="x86_64-pc-msys")
BASH_VERSION='5.2.37(1)-release'
COLUMNS=80
COMMONPROGRAMFILES='C:\Program Files\Common Files'
COMPLETION_PATH='C:/Program Files/Git/mingw64/share/git/completion'
COMPUTERNAME=ALIEN
COMP_WORDBREAKS=$' \t\n"\'@><=;|&(:'
COMSPEC='C:\WINDOWS\system32\cmd.exe'
CONFIG_SITE=/etc/config.site
CommonProgramW6432='C:\Program Files\Common Files'
DIRSTACK=()
DISPLAY=needs-to-be-defined
DriverData='C:\Windows\System32\Drivers\DriverData'
EFC_9580_1262719628=1
EFC_9580_1592913036=1
EFC_9580_2775293581=1
EFC_9580_3789132940=1
EUID=197609
EXEPATH='C:\Program Files\Git'
FPS_BROWSER_APP_PROFILE_STRING='Internet Explorer'
FPS_BROWSER_USER_PROFILE_STRING=Default
GIT_EXEC_PATH='C:/Program Files/Git/mingw64/libexec/git-core'
GROUPS=()
HISTFILE=/c/Users/richa/.bash_history
HISTFILESIZE=500
HISTSIZE=500
HOME=/c/Users/richa
HOMEDRIVE=C:
HOMEPATH='\Users\richa'
HOSTNAME=Alien
HOSTTYPE=x86_64
IFS=$' \t\n'
INFOPATH=/mingw64/local/info:/mingw64/share/info:/usr/local/info:/usr/share/info:/usr/info:/share/info
JAVA_HOME='C:\Program Files\Eclipse Adoptium\jdk-24.0.0.36-hotspot\'
LC_CTYPE=en_US.UTF-8
LINES=24
LOCALAPPDATA='C:\Users\richa\AppData\Local'
LOGONSERVER='\\ALIEN'
MACHTYPE=x86_64-pc-msys
MAILCHECK=60
MANPATH=/mingw64/local/man:/mingw64/share/man:/usr/local/man:/usr/share/man:/usr/man:/share/man
MINGW_CHOST=x86_64-w64-mingw32
MINGW_MOUNT_POINT=/mingw64
MINGW_PACKAGE_PREFIX=mingw-w64-x86_64
MINGW_PREFIX=/mingw64
MSYS2_PATH=/usr/local/bin:/usr/bin:/bin
MSYS2_PS1='\[\033]0;$TITLEPREFIX:$PWD\007\]\n\[\033[32m\]\u@\h \[\033[35m\]$MSYSTEM \[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n$ '
MSYSTEM=MINGW64
MSYSTEM_CARCH=x86_64
MSYSTEM_CHOST=x86_64-w64-mingw32
MSYSTEM_PREFIX=/mingw64
NUMBER_OF_PROCESSORS=8
OLDPWD=/c/Users/richa/Development/SmallJS/SmallJS
OPENSSL_CONF='C:\Program Files\PostgreSQL\psqlODBC\etc\openssl.cnf'
OPTERR=1
OPTIND=1
ORIGINAL_PATH='/mingw64/bin:/usr/bin:/c/Users/richa/bin:/c/Program Files/Eclipse Adoptium/jdk-24.0.0.36-hotspot/bin:/c/Program Files/Oculus/Support/oculus-runtime:/c/Program Files/Python/Scripts:/c/Program Files/Python:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/c/Program Files/Microsoft VS Code/bin:/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/c/Program Files (x86)/Pulse Secure/VC142.CRT/X64:/c/Program Files (x86)/Pulse Secure/VC142.CRT/X86:/c/Program Files/dotnet:/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/170/Tools/Binn:/c/Program Files (x86)/Microsoft SQL Server/150/DTS/Binn:/c/Program Files/Azure Data Studio/bin:/c/Program Files/Microsoft/Web Platform Installer:/c/ProgramData/chocolatey/bin:/c/Program Files (x86)/Microsoft SQL Server/150/Tools/Binn:/c/Program Files/Microsoft SQL Server/150/Tools/Binn:/c/Program Files/Microsoft SQL Server/150/DTS/Binn:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files (x86)/Common Files/Pulse Secure/TNC Client Plugin:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files (x86)/PC-BASIC 2.0:/d/Program Files/FPC/3.2.2/bin/i386-Win32:/c/Program Files/PowerShell/7:/c/Program Files/nodejs:/cmd:/c/Users/richa/AppData/Local/Microsoft/WindowsApps:/c/Users/richa/.dotnet/tools:/c/Program Files/Azure Data Studio/bin:/c/Users/richa/AppData/Local/GitHubDesktop/bin:/c/Users/richa/AppData/Roaming/npm'
ORIGINAL_TEMP=/tmp
ORIGINAL_TMP=/tmp
OS=Windows_NT
OSTYPE=msys
OculusBase='C:\Program Files\Oculus\'
OneDrive='C:\Users\richa\OneDrive - UvA'
OneDriveCommercial='C:\Users\richa\OneDrive - UvA'
OneDriveConsumer='D:\Richard\OneDrive'
PATH='/c/Users/richa/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/usr/bin:/c/Users/richa/bin:/c/Program Files/Eclipse Adoptium/jdk-24.0.0.36-hotspot/bin:/c/Program Files/Oculus/Support/oculus-runtime:/c/Program Files/Python/Scripts:/c/Program Files/Python:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/c/Program Files/Microsoft VS Code/bin:/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/c/Program Files (x86)/Pulse Secure/VC142.CRT/X64:/c/Program Files (x86)/Pulse Secure/VC142.CRT/X86:/c/Program Files/dotnet:/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/c/Program Files/Microsoft SQL Server/Client SDK/ODBC/170/Tools/Binn:/c/Program Files (x86)/Microsoft SQL Server/150/DTS/Binn:/c/Program Files/Azure Data Studio/bin:/c/Program Files/Microsoft/Web Platform Installer:/c/ProgramData/chocolatey/bin:/c/Program Files (x86)/Microsoft SQL Server/150/Tools/Binn:/c/Program Files/Microsoft SQL Server/150/Tools/Binn:/c/Program Files/Microsoft SQL Server/150/DTS/Binn:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files (x86)/Common Files/Pulse Secure/TNC Client Plugin:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files (x86)/PC-BASIC 2.0:/d/Program Files/FPC/3.2.2/bin/i386-Win32:/c/Program Files/PowerShell/7:/c/Program Files/nodejs:/cmd:/c/Users/richa/AppData/Local/Microsoft/WindowsApps:/c/Users/richa/.dotnet/tools:/c/Program Files/Azure Data Studio/bin:/c/Users/richa/AppData/Local/GitHubDesktop/bin:/c/Users/richa/AppData/Roaming/npm:/usr/bin/vendor_perl:/usr/bin/core_perl'
PATHEXT='.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW'
PIPESTATUS=([0]="0")
PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig
PKG_CONFIG_SYSTEM_INCLUDE_PATH=/mingw64/include
PKG_CONFIG_SYSTEM_LIBRARY_PATH=/mingw64/lib
PLINK_PROTOCOL=ssh
POWERSHELL_DISTRIBUTION_CHANNEL='MSI:Windows 10 Pro'
PPID=1464
PROCESSOR_ARCHITECTURE=AMD64
PROCESSOR_IDENTIFIER='Intel64 Family 6 Model 94 Stepping 3, GenuineIntel'
PROCESSOR_LEVEL=6
PROCESSOR_REVISION=5e03
PROGRAMFILES='C:\Program Files'
PS1='\w> '
PS2='> '
PS4='+ '
PSModulePath='C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules;C:\Program Files (x86)\Microsoft SQL Server\150\Tools\PowerShell\Modules\'
PUBLIC='C:\Users\Public'
PWD=/c/Users/richa/Development/SmallJS/SmallJS/Browser
ProgramData='C:\ProgramData'
ProgramW6432='C:\Program Files'
SESSIONNAME=Console
SHELL=/usr/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
SHLVL=1
SSH_ASKPASS=/mingw64/bin/git-askpass.exe
SYSCONFDIR=/etc
SYSTEMDRIVE=C:
SYSTEMROOT='C:\WINDOWS'
TEMP=/tmp
TERM=xterm
TERM_PROGRAM=mintty
TERM_PROGRAM_VERSION=3.7.7
TITLEPREFIX=MINGW64
TMP=/tmp
TMPDIR=/tmp
UID=197609
USERDOMAIN=ALIEN
USERDOMAIN_ROAMINGPROFILE=ALIEN
USERNAME=richa
USERPROFILE='C:\Users\richa'
VBOX_MSI_INSTALL_PATH='C:\Program Files\Oracle\VirtualBox\'
WINDIR='C:\WINDOWS'
_=set
__git_CRLF=$'\n'
__git_ESC=$'\E'
__git_LF=$'\n'
__git_SOH=$'\001'
__git_STX=$'\002'
__git_all_commands=
__git_am_inprogress_options='--skip --continue --resolved --abort --quit --show-current-patch'
__git_cherry_pick_inprogress_options='--continue --quit --abort --skip'
__git_cmds_with_parseopt_helper=
__git_color_moved_opts='no default plain blocks zebra dimmed-zebra'
__git_color_moved_ws_opts=$'no ignore-space-at-eol ignore-space-change\n\t\t\tignore-all-space allow-indentation-change'
__git_config_sections=
__git_config_vars=
__git_config_vars_all=
__git_diff_algorithms='myers minimal patience histogram'
__git_diff_common_options=$'--stat --numstat --shortstat --summary\n\t\t\t--patch-with-stat --name-only --name-status --color\n\t\t\t--no-color --color-words --no-renames --check\n\t\t\t--color-moved --color-moved= --no-color-moved\n\t\t\t--color-moved-ws= --no-color-moved-ws\n\t\t\t--full-index --binary --abbrev --diff-filter=\n\t\t\t--find-copies --find-object --find-renames\n\t\t\t--no-relative --relative\n\t\t\t--find-copies-harder --ignore-cr-at-eol\n\t\t\t--text --ignore-space-at-eol --ignore-space-change\n\t\t\t--ignore-all-space --ignore-blank-lines --exit-code\n\t\t\t--quiet --ext-diff --no-ext-diff --unified=\n\t\t\t--no-prefix --src-prefix= --dst-prefix=\n\t\t\t--inter-hunk-context= --function-context\n\t\t\t--patience --histogram --minimal\n\t\t\t--raw --word-diff --word-diff-regex=\n\t\t\t--dirstat --dirstat= --dirstat-by-file\n\t\t\t--dirstat-by-file= --cumulative\n\t\t\t--diff-algorithm= --default-prefix\n\t\t\t--submodule --submodule= --ignore-submodules\n\t\t\t--indent-heuristic --no-indent-heuristic\n\t\t\t--textconv --no-textconv --break-rewrites\n\t\t\t--patch --no-patch --cc --combined-all-paths\n\t\t\t--anchored= --compact-summary --ignore-matching-lines=\n\t\t\t--irreversible-delete --line-prefix --no-stat\n\t\t\t--output= --output-indicator-context=\n\t\t\t--output-indicator-new= --output-indicator-old=\n\t\t\t--ws-error-highlight=\n\t\t\t--pickaxe-all --pickaxe-regex --patch-with-raw\n'
__git_diff_difftool_options=$'--cached --staged\n\t\t\t--base --ours --theirs --no-index --merge-base\n\t\t\t--ita-invisible-in-index --ita-visible-in-index\n\t\t\t--stat --numstat --shortstat --summary\n\t\t\t--patch-with-stat --name-only --name-status --color\n\t\t\t--no-color --color-words --no-renames --check\n\t\t\t--color-moved --color-moved= --no-color-moved\n\t\t\t--color-moved-ws= --no-color-moved-ws\n\t\t\t--full-index --binary --abbrev --diff-filter=\n\t\t\t--find-copies --find-object --find-renames\n\t\t\t--no-relative --relative\n\t\t\t--find-copies-harder --ignore-cr-at-eol\n\t\t\t--text --ignore-space-at-eol --ignore-space-change\n\t\t\t--ignore-all-space --ignore-blank-lines --exit-code\n\t\t\t--quiet --ext-diff --no-ext-diff --unified=\n\t\t\t--no-prefix --src-prefix= --dst-prefix=\n\t\t\t--inter-hunk-context= --function-context\n\t\t\t--patience --histogram --minimal\n\t\t\t--raw --word-diff --word-diff-regex=\n\t\t\t--dirstat --dirstat= --dirstat-by-file\n\t\t\t--dirstat-by-file= --cumulative\n\t\t\t--diff-algorithm= --default-prefix\n\t\t\t--submodule --submodule= --ignore-submodules\n\t\t\t--indent-heuristic --no-indent-heuristic\n\t\t\t--textconv --no-textconv --break-rewrites\n\t\t\t--patch --no-patch --cc --combined-all-paths\n\t\t\t--anchored= --compact-summary --ignore-matching-lines=\n\t\t\t--irreversible-delete --line-prefix --no-stat\n\t\t\t--output= --output-indicator-context=\n\t\t\t--output-indicator-new= --output-indicator-old=\n\t\t\t--ws-error-highlight=\n\t\t\t--pickaxe-all --pickaxe-regex --patch-with-raw\n'
__git_diff_merges_opts='off none on first-parent 1 separate m combined c dense-combined cc remerge r'
__git_diff_submodule_formats='diff log short'
__git_fetch_recurse_submodules='yes on-demand no'
__git_format_patch_extra_options=$'\n\t--full-index --not --all --no-prefix --src-prefix=\n\t--dst-prefix= --notes\n'
__git_log_common_options=$'\n\t--not --all\n\t--branches --tags --remotes\n\t--first-parent --merges --no-merges\n\t--max-count=\n\t--max-age= --since= --after=\n\t--min-age= --until= --before=\n\t--min-parents= --max-parents=\n\t--no-min-parents --no-max-parents\n\t--alternate-refs --ancestry-path\n\t--author-date-order --basic-regexp\n\t--bisect --boundary --exclude-first-parent-only\n\t--exclude-hidden --extended-regexp\n\t--fixed-strings --grep-reflog\n\t--ignore-missing --left-only --perl-regexp\n\t--reflog --regexp-ignore-case --remove-empty\n\t--right-only --show-linear-break\n\t--show-notes-by-default --show-pulls\n\t--since-as-filter --single-worktree\n'
__git_log_date_formats='relative iso8601 iso8601-strict rfc2822 short local default human raw unix auto: format:'
__git_log_gitk_options=$'\n\t--dense --sparse --full-history\n\t--simplify-merges --simplify-by-decoration\n\t--left-right --notes --no-notes\n'
__git_log_pretty_formats='oneline short medium full fuller reference email raw format: tformat: mboxrd'
__git_log_shortlog_options=$'\n\t--author= --committer= --grep=\n\t--all-match --invert-grep\n'
__git_log_show_options=$'\n\t--diff-merges --diff-merges= --no-diff-merges --dd --remerge-diff\n\t--encoding=\n'
__git_merge_strategies=
__git_merge_strategy_options=$'ours theirs subtree subtree= patience\n\thistogram diff-algorithm= ignore-space-change ignore-all-space\n\tignore-space-at-eol renormalize no-renormalize no-renames\n\tfind-renames find-renames= rename-threshold='
__git_mergetools_common=$'diffuse diffmerge ecmerge emerge kdiff3 meld opendiff\n\t\t\ttkdiff vimdiff nvimdiff gvimdiff xxdiff araxis p4merge\n\t\t\tbc codecompare smerge\n'
__git_patchformat='mbox stgit stgit-series hg mboxrd'
__git_printf_supports_v=yes
__git_push_recurse_submodules='check on-demand only'
__git_quoted_cr='nowarn warn strip'
__git_rebase_inprogress_options='--continue --skip --abort --quit --show-current-patch'
__git_rebase_interactive_inprogress_options='--continue --skip --abort --quit --show-current-patch --edit-todo'
__git_ref_fieldlist='refname objecttype objectsize objectname upstream push HEAD symref'
__git_revert_inprogress_options='--continue --quit --abort --skip'
__git_send_email_confirm_options='always never auto cc compose'
__git_send_email_suppresscc_options='author self cc bodycc sob cccmd body all'
__git_sequencer_inprogress_options='--continue --quit --abort --skip'
__git_showcurrentpatch='diff raw'
__git_untracked_file_modes='all no normal'
__git_whitespacelist='nowarn warn error error-all fix'
__git_ws_error_highlight_opts='context old new all default'
c='/c/Users/richa/bash_completion.d/*.bash'
name=winget
postinst='/etc/post-install/*.post'
___git_complete () 
{ 
    local wrapper="__git_wrap${2}";
    eval "$wrapper () { __git_func_wrap $2 ; }";
    complete -o bashdefault -o default -o nospace -F $wrapper $1 2> /dev/null || complete -o default -o nospace -F $wrapper $1
}
__git () 
{ 
    git ${__git_C_args:+"${__git_C_args[@]}"} ${__git_dir:+--git-dir="$__git_dir"} "$@" 2> /dev/null
}
__git_aliased_command () 
{ 
    local cur=$1 last list= word cmdline;
    while [[ -n "$cur" ]]; do
        if [[ "$list" == *" $cur "* ]]; then
            return;
        fi;
        cmdline=$(__git config --get "alias.$cur");
        list=" $cur $list";
        last=$cur;
        cur=;
        for word in $cmdline;
        do
            case "$word" in 
                \!gitk | gitk)
                    cur="gitk";
                    break
                ;;
                \!*)
                    : shell command alias
                ;;
                -*)
                    : option
                ;;
                *=*)
                    : setting env
                ;;
                git)
                    : git itself
                ;;
                \(\))
                    : skip parens of shell function definition
                ;;
                {)
                    : skip start of shell helper function
                ;;
                :)
                    : skip null command
                ;;
                \'*)
                    : skip opening quote after sh -c
                ;;
                *)
                    cur="${word%;}";
                    break
                ;;
            esac;
        done;
    done;
    cur=$last;
    if [[ "$cur" != "$1" ]]; then
        echo "$cur";
    fi
}
__git_checkout_default_dwim_mode () 
{ 
    local last_option dwim_opt="--dwim";
    if [ "${GIT_COMPLETION_CHECKOUT_NO_GUESS-}" = "1" ]; then
        dwim_opt="";
    fi;
    if [ -n "$(__git_find_on_cmdline "--no-track")" ]; then
        dwim_opt="";
    fi;
    if [ "$(__git config --type=bool checkout.guess)" = "false" ]; then
        dwim_opt="";
    fi;
    last_option="$(__git_find_last_on_cmdline "--guess --no-guess")";
    case "$last_option" in 
        --guess)
            dwim_opt="--dwim"
        ;;
        --no-guess)
            dwim_opt=""
        ;;
    esac;
    echo "$dwim_opt"
}
__git_complete () 
{ 
    local func;
    if __git_have_func $2; then
        func=$2;
    else
        if __git_have_func __$2_main; then
            func=__$2_main;
        else
            if __git_have_func _$2; then
                func=_$2;
            else
                echo "ERROR: could not find function '$2'" 1>&2;
                return 1;
            fi;
        fi;
    fi;
    ___git_complete $1 $func
}
__git_complete_command () 
{ 
    local command="$1";
    local completion_func="_git_${command//-/_}";
    if ! __git_have_func $completion_func && __git_have_func _completion_loader; then
        _completion_loader "git-$command";
    fi;
    if __git_have_func $completion_func; then
        $completion_func;
        return 0;
    else
        if __git_support_parseopt_helper "$command"; then
            __git_complete_common "$command";
            return 0;
        else
            return 1;
        fi;
    fi
}
__git_complete_common () 
{ 
    local command="$1";
    case "$cur" in 
        --*)
            __gitcomp_builtin "$command"
        ;;
    esac
}
__git_complete_config_variable_name () 
{ 
    local cur_="$cur" sfx;
    while test $# != 0; do
        case "$1" in 
            --cur=*)
                cur_="${1##--cur=}"
            ;;
            --sfx=*)
                sfx="${1##--sfx=}"
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    case "$cur_" in 
        branch.*.* | guitool.*.* | difftool.*.* | man.*.* | mergetool.*.* | remote.*.* | submodule.*.* | url.*.*)
            local pfx="${cur_%.*}.";
            cur_="${cur_##*.}";
            local section="${pfx%.*.}";
            __git_compute_second_level_config_vars_for_section "${section}";
            local this_section="__git_second_level_config_vars_for_section_${section}";
            __gitcomp "$(__git_indirect "${this_section}")" "$pfx" "$cur_" "$sfx";
            return
        ;;
        branch.*)
            local pfx="${cur_%.*}.";
            cur_="${cur_#*.}";
            local section="${pfx%.}";
            __gitcomp_direct "$(__git_heads "$pfx" "$cur_" ".")";
            __git_compute_first_level_config_vars_for_section "${section}";
            local this_section="__git_first_level_config_vars_for_section_${section}";
            __gitcomp_nl_append "$(__git_indirect "${this_section}")" "$pfx" "$cur_" "${sfx:- }";
            return
        ;;
        pager.*)
            local pfx="${cur_%.*}.";
            cur_="${cur_#*.}";
            __git_compute_all_commands;
            __gitcomp_nl "$__git_all_commands" "$pfx" "$cur_" "${sfx:- }";
            return
        ;;
        remote.*)
            local pfx="${cur_%.*}.";
            cur_="${cur_#*.}";
            local section="${pfx%.}";
            __gitcomp_nl "$(__git_remotes)" "$pfx" "$cur_" ".";
            __git_compute_first_level_config_vars_for_section "${section}";
            local this_section="__git_first_level_config_vars_for_section_${section}";
            __gitcomp_nl_append "$(__git_indirect "${this_section}")" "$pfx" "$cur_" "${sfx:- }";
            return
        ;;
        submodule.*)
            local pfx="${cur_%.*}.";
            cur_="${cur_#*.}";
            local section="${pfx%.}";
            __gitcomp_nl "$(__git config -f "$(__git rev-parse --show-toplevel)/.gitmodules" --get-regexp 'submodule.*.path' | awk -F. '{print $2}')" "$pfx" "$cur_" ".";
            __git_compute_first_level_config_vars_for_section "${section}";
            local this_section="__git_first_level_config_vars_for_section_${section}";
            __gitcomp_nl_append "$(__git_indirect "${this_section}")" "$pfx" "$cur_" "${sfx:- }";
            return
        ;;
        *.*)
            __git_compute_config_vars;
            __gitcomp "$__git_config_vars" "" "$cur_" "$sfx"
        ;;
        *)
            __git_compute_config_sections;
            __gitcomp "$__git_config_sections" "" "$cur_" "."
        ;;
    esac
}
__git_complete_config_variable_name_and_value () 
{ 
    local cur_="$cur";
    while test $# != 0; do
        case "$1" in 
            --cur=*)
                cur_="${1##--cur=}"
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    case "$cur_" in 
        *=*)
            __git_complete_config_variable_value --varname="${cur_%%=*}" --cur="${cur_#*=}"
        ;;
        *)
            __git_complete_config_variable_name --cur="$cur_" --sfx='='
        ;;
    esac
}
__git_complete_config_variable_value () 
{ 
    local varname="$prev" cur_="$cur";
    while test $# != 0; do
        case "$1" in 
            --varname=*)
                varname="${1##--varname=}"
            ;;
            --cur=*)
                cur_="${1##--cur=}"
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    if [ "${BASH_VERSINFO[0]:-0}" -ge 4 ]; then
        varname="${varname,,}";
    else
        varname="$(echo "$varname" | tr A-Z a-z)";
    fi;
    case "$varname" in 
        branch.*.remote | branch.*.pushremote)
            __gitcomp_nl "$(__git_remotes)" "" "$cur_";
            return
        ;;
        branch.*.merge)
            __git_complete_refs --cur="$cur_";
            return
        ;;
        branch.*.rebase)
            __gitcomp "false true merges interactive" "" "$cur_";
            return
        ;;
        remote.pushdefault)
            __gitcomp_nl "$(__git_remotes)" "" "$cur_";
            return
        ;;
        remote.*.fetch)
            local remote="${varname#remote.}";
            remote="${remote%.fetch}";
            if [ -z "$cur_" ]; then
                __gitcomp_nl "refs/heads/" "" "" "";
                return;
            fi;
            __gitcomp_nl "$(__git_refs_remotes "$remote")" "" "$cur_";
            return
        ;;
        remote.*.push)
            local remote="${varname#remote.}";
            remote="${remote%.push}";
            __gitcomp_nl "$(__git for-each-ref --format='%(refname):%(refname)' refs/heads)" "" "$cur_";
            return
        ;;
        pull.twohead | pull.octopus)
            __git_compute_merge_strategies;
            __gitcomp "$__git_merge_strategies" "" "$cur_";
            return
        ;;
        color.pager)
            __gitcomp "false true" "" "$cur_";
            return
        ;;
        color.*.*)
            __gitcomp "
			normal black red green yellow blue magenta cyan white
			bold dim ul blink reverse
			" "" "$cur_";
            return
        ;;
        color.*)
            __gitcomp "false true always never auto" "" "$cur_";
            return
        ;;
        diff.submodule)
            __gitcomp "$__git_diff_submodule_formats" "" "$cur_";
            return
        ;;
        help.format)
            __gitcomp "man info web html" "" "$cur_";
            return
        ;;
        log.date)
            __gitcomp "$__git_log_date_formats" "" "$cur_";
            return
        ;;
        sendemail.aliasfiletype)
            __gitcomp "mutt mailrc pine elm gnus" "" "$cur_";
            return
        ;;
        sendemail.confirm)
            __gitcomp "$__git_send_email_confirm_options" "" "$cur_";
            return
        ;;
        sendemail.suppresscc)
            __gitcomp "$__git_send_email_suppresscc_options" "" "$cur_";
            return
        ;;
        sendemail.transferencoding)
            __gitcomp "7bit 8bit quoted-printable base64" "" "$cur_";
            return
        ;;
        *.*)
            return
        ;;
    esac
}
__git_complete_fetch_refspecs () 
{ 
    local i remote="$1" pfx="${2-}" cur_="${3-$cur}" sfx="${4- }";
    __gitcomp_direct "$(for i in $(__git_refs "$remote" "" "" "$cur_");
do
    echo "$pfx$i:$i$sfx";
done)"
}
__git_complete_file () 
{ 
    __git_complete_revlist_file
}
__git_complete_force_with_lease () 
{ 
    local cur_=$1;
    case "$cur_" in 
        --*=)

        ;;
        *:*)
            __git_complete_refs --cur="${cur_#*:}"
        ;;
        *)
            __git_complete_refs --cur="$cur_"
        ;;
    esac
}
__git_complete_index_file () 
{ 
    local dequoted_word pfx="" cur_;
    __git_dequote "$cur";
    case "$dequoted_word" in 
        ?*/*)
            pfx="${dequoted_word%/*}/";
            cur_="${dequoted_word##*/}"
        ;;
        *)
            cur_="$dequoted_word"
        ;;
    esac;
    __gitcomp_file_direct "$(__git_index_files "$1" "$pfx" "$cur_")"
}
__git_complete_log_opts () 
{ 
    COMPREPLY=();
    local merge="";
    if __git_pseudoref_exists MERGE_HEAD; then
        merge="--merge";
    fi;
    case "$prev,$cur" in 
        -L,:*:*)
            return
        ;;
        -L,:*)
            __git_complete_symbol --cur="${cur#:}" --sfx=":";
            return
        ;;
        -G,* | -S,*)
            __git_complete_symbol;
            return
        ;;
    esac;
    case "$cur" in 
        --pretty=* | --format=*)
            __gitcomp "$__git_log_pretty_formats $(__git_pretty_aliases)
			" "" "${cur#*=}";
            return
        ;;
        --date=*)
            __gitcomp "$__git_log_date_formats" "" "${cur##--date=}";
            return
        ;;
        --decorate=*)
            __gitcomp "full short no" "" "${cur##--decorate=}";
            return
        ;;
        --diff-algorithm=*)
            __gitcomp "$__git_diff_algorithms" "" "${cur##--diff-algorithm=}";
            return
        ;;
        --submodule=*)
            __gitcomp "$__git_diff_submodule_formats" "" "${cur##--submodule=}";
            return
        ;;
        --ws-error-highlight=*)
            __gitcomp "$__git_ws_error_highlight_opts" "" "${cur##--ws-error-highlight=}";
            return
        ;;
        --no-walk=*)
            __gitcomp "sorted unsorted" "" "${cur##--no-walk=}";
            return
        ;;
        --diff-merges=*)
            __gitcomp "$__git_diff_merges_opts" "" "${cur##--diff-merges=}";
            return
        ;;
        --*)
            __gitcomp "
			$__git_log_common_options
			$__git_log_shortlog_options
			$__git_log_gitk_options
			$__git_log_show_options
			--root --topo-order --date-order --reverse
			--follow --full-diff
			--abbrev-commit --no-abbrev-commit --abbrev=
			--relative-date --date=
			--pretty= --format= --oneline
			--show-signature
			--cherry-mark
			--cherry-pick
			--graph
			--decorate --decorate= --no-decorate
			--walk-reflogs
			--no-walk --no-walk= --do-walk
			--parents --children
			--expand-tabs --expand-tabs= --no-expand-tabs
			--clear-decorations --decorate-refs=
			--decorate-refs-exclude=
			$merge
			$__git_diff_common_options
			";
            return
        ;;
        -L:*:*)
            return
        ;;
        -L:*)
            __git_complete_symbol --cur="${cur#-L:}" --sfx=":";
            return
        ;;
        -G*)
            __git_complete_symbol --pfx="-G" --cur="${cur#-G}";
            return
        ;;
        -S*)
            __git_complete_symbol --pfx="-S" --cur="${cur#-S}";
            return
        ;;
    esac
}
__git_complete_refs () 
{ 
    local remote= dwim= pfx= cur_="$cur" sfx=" " mode="refs";
    while test $# != 0; do
        case "$1" in 
            --remote=*)
                remote="${1##--remote=}"
            ;;
            --dwim)
                dwim="yes"
            ;;
            --track)
                dwim="yes"
            ;;
            --pfx=*)
                pfx="${1##--pfx=}"
            ;;
            --cur=*)
                cur_="${1##--cur=}"
            ;;
            --sfx=*)
                sfx="${1##--sfx=}"
            ;;
            --mode=*)
                mode="${1##--mode=}"
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    case "$mode" in 
        refs)
            __gitcomp_direct "$(__git_refs "$remote" "" "$pfx" "$cur_" "$sfx")"
        ;;
        heads)
            __gitcomp_direct "$(__git_heads "$pfx" "$cur_" "$sfx")"
        ;;
        remote-heads)
            __gitcomp_direct "$(__git_remote_heads "$pfx" "$cur_" "$sfx")"
        ;;
        *)
            return 1
        ;;
    esac;
    if [ "$dwim" = "yes" ]; then
        __gitcomp_direct_append "$(__git_dwim_remote_heads "$pfx" "$cur_" "$sfx")";
    fi
}
__git_complete_remote_or_refspec () 
{ 
    local cur_="$cur" cmd="${words[__git_cmd_idx]}";
    local i c=$((__git_cmd_idx+1)) remote="" pfx="" lhs=1 no_complete_refspec=0;
    if [ "$cmd" = "remote" ]; then
        ((c++));
    fi;
    while [ $c -lt $cword ]; do
        i="${words[c]}";
        case "$i" in 
            --mirror)
                [ "$cmd" = "push" ] && no_complete_refspec=1
            ;;
            -d | --delete)
                [ "$cmd" = "push" ] && lhs=0
            ;;
            --all)
                case "$cmd" in 
                    push)
                        no_complete_refspec=1
                    ;;
                    fetch)
                        return
                    ;;
                    *)

                    ;;
                esac
            ;;
            --multiple)
                no_complete_refspec=1;
                break
            ;;
            -*)

            ;;
            *)
                remote="$i";
                break
            ;;
        esac;
        ((c++));
    done;
    if [ -z "$remote" ]; then
        __gitcomp_nl "$(__git_remotes)";
        return;
    fi;
    if [ $no_complete_refspec = 1 ]; then
        return;
    fi;
    [ "$remote" = "." ] && remote=;
    case "$cur_" in 
        *:*)
            case "$COMP_WORDBREAKS" in 
                *:*)
                    : great
                ;;
                *)
                    pfx="${cur_%%:*}:"
                ;;
            esac;
            cur_="${cur_#*:}";
            lhs=0
        ;;
        +*)
            pfx="+";
            cur_="${cur_#+}"
        ;;
    esac;
    case "$cmd" in 
        fetch)
            if [ $lhs = 1 ]; then
                __git_complete_fetch_refspecs "$remote" "$pfx" "$cur_";
            else
                __git_complete_refs --pfx="$pfx" --cur="$cur_";
            fi
        ;;
        pull | remote)
            if [ $lhs = 1 ]; then
                __git_complete_refs --remote="$remote" --pfx="$pfx" --cur="$cur_";
            else
                __git_complete_refs --pfx="$pfx" --cur="$cur_";
            fi
        ;;
        push)
            if [ $lhs = 1 ]; then
                __git_complete_refs --pfx="$pfx" --cur="$cur_";
            else
                __git_complete_refs --remote="$remote" --pfx="$pfx" --cur="$cur_";
            fi
        ;;
    esac
}
__git_complete_revlist () 
{ 
    __git_complete_revlist_file
}
__git_complete_revlist_file () 
{ 
    local dequoted_word pfx ls ref cur_="$cur";
    case "$cur_" in 
        *..?*:*)
            return
        ;;
        ?*:*)
            ref="${cur_%%:*}";
            cur_="${cur_#*:}";
            __git_dequote "$cur_";
            case "$dequoted_word" in 
                ?*/*)
                    pfx="${dequoted_word%/*}";
                    cur_="${dequoted_word##*/}";
                    ls="$ref:$pfx";
                    pfx="$pfx/"
                ;;
                *)
                    cur_="$dequoted_word";
                    ls="$ref"
                ;;
            esac;
            case "$COMP_WORDBREAKS" in 
                *:*)
                    : great
                ;;
                *)
                    pfx="$ref:$pfx"
                ;;
            esac;
            __gitcomp_file "$(__git ls-tree "$ls" | sed 's/^.*	//
				       s/$//')" "$pfx" "$cur_"
        ;;
        *...*)
            pfx="${cur_%...*}...";
            cur_="${cur_#*...}";
            __git_complete_refs --pfx="$pfx" --cur="$cur_"
        ;;
        *..*)
            pfx="${cur_%..*}..";
            cur_="${cur_#*..}";
            __git_complete_refs --pfx="$pfx" --cur="$cur_"
        ;;
        *)
            __git_complete_refs
        ;;
    esac
}
__git_complete_strategy () 
{ 
    __git_compute_merge_strategies;
    case "$prev" in 
        -s | --strategy)
            __gitcomp "$__git_merge_strategies";
            return 0
        ;;
        -X)
            __gitcomp "$__git_merge_strategy_options";
            return 0
        ;;
    esac;
    case "$cur" in 
        --strategy=*)
            __gitcomp "$__git_merge_strategies" "" "${cur##--strategy=}";
            return 0
        ;;
        --strategy-option=*)
            __gitcomp "$__git_merge_strategy_options" "" "${cur##--strategy-option=}";
            return 0
        ;;
    esac;
    return 1
}
__git_complete_symbol () 
{ 
    local tags=tags pfx="" cur_="${cur-}" sfx=" ";
    while test $# != 0; do
        case "$1" in 
            --tags=*)
                tags="${1##--tags=}"
            ;;
            --pfx=*)
                pfx="${1##--pfx=}"
            ;;
            --cur=*)
                cur_="${1##--cur=}"
            ;;
            --sfx=*)
                sfx="${1##--sfx=}"
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    if test -r "$tags"; then
        __gitcomp_direct "$(__git_match_ctag "$cur_" "$tags" "$pfx" "$sfx")";
    fi
}
__git_complete_worktree_paths () 
{ 
    local IFS='
';
    __gitcomp_nl "$(__git worktree list --porcelain | sed -n -e '2,$ s/^worktree //p')"
}
__git_compute_all_commands () 
{ 
    test -n "$__git_all_commands" || __git_all_commands=$(__git --list-cmds=main,others,alias,nohelpers)
}
__git_compute_config_sections () 
{ 
    test -n "$__git_config_sections" || __git_config_sections="$(git help --config-sections-for-completion)"
}
__git_compute_config_vars () 
{ 
    test -n "$__git_config_vars" || __git_config_vars="$(git help --config-for-completion)"
}
__git_compute_config_vars_all () 
{ 
    test -n "$__git_config_vars_all" || __git_config_vars_all="$(git --no-pager help --config)"
}
__git_compute_first_level_config_vars_for_section () 
{ 
    local section="$1";
    __git_compute_config_vars;
    local this_section="__git_first_level_config_vars_for_section_${section}";
    test -n "$(__git_indirect "${this_section}")" || printf -v "__git_first_level_config_vars_for_section_${section}" %s "$(echo "$__git_config_vars" | awk -F. "/^${section}\.[a-z]/ { print \$2 }")"
}
__git_compute_merge_strategies () 
{ 
    test -n "$__git_merge_strategies" || __git_merge_strategies=$(__git_list_merge_strategies)
}
__git_compute_second_level_config_vars_for_section () 
{ 
    local section="$1";
    __git_compute_config_vars_all;
    local this_section="__git_second_level_config_vars_for_section_${section}";
    test -n "$(__git_indirect "${this_section}")" || printf -v "__git_second_level_config_vars_for_section_${section}" %s "$(echo "$__git_config_vars_all" | awk -F. "/^${section}\.</ { print \$3 }")"
}
__git_config_get_set_variables () 
{ 
    local prevword word config_file= c=$cword;
    while [ $c -gt "$__git_cmd_idx" ]; do
        word="${words[c]}";
        case "$word" in 
            --system | --global | --local | --file=*)
                config_file="$word";
                break
            ;;
            -f | --file)
                config_file="$word $prevword";
                break
            ;;
        esac;
        prevword=$word;
        c=$((--c));
    done;
    __git config $config_file --name-only --list
}
__git_count_arguments () 
{ 
    local word i c=0;
    for ((i=$__git_cmd_idx; i < ${#words[@]}; i++))
    do
        word="${words[i]}";
        case "$word" in 
            --)
                ((c = 0))
            ;;
            "$1")
                ((c = 0))
            ;;
            ?*)
                ((c++))
            ;;
        esac;
    done;
    printf "%d" $c
}
__git_dequote () 
{ 
    local rest="$1" len ch;
    dequoted_word="";
    while test -n "$rest"; do
        len=${#dequoted_word};
        dequoted_word="$dequoted_word${rest%%[\\\'\"]*}";
        rest="${rest:$((${#dequoted_word}-$len))}";
        case "${rest:0:1}" in 
            \\)
                ch="${rest:1:1}";
                case "$ch" in 
                    '
')

                    ;;
                    *)
                        dequoted_word="$dequoted_word$ch"
                    ;;
                esac;
                rest="${rest:2}"
            ;;
            \')
                rest="${rest:1}";
                len=${#dequoted_word};
                dequoted_word="$dequoted_word${rest%%\'*}";
                rest="${rest:$((${#dequoted_word}-$len+1))}"
            ;;
            \")
                rest="${rest:1}";
                while test -n "$rest"; do
                    len=${#dequoted_word};
                    dequoted_word="$dequoted_word${rest%%[\\\"]*}";
                    rest="${rest:$((${#dequoted_word}-$len))}";
                    case "${rest:0:1}" in 
                        \\)
                            ch="${rest:1:1}";
                            case "$ch" in 
                                \" | \\ | \$ | \`)
                                    dequoted_word="$dequoted_word$ch"
                                ;;
                                '
')

                                ;;
                                *)
                                    dequoted_word="$dequoted_word\\$ch"
                                ;;
                            esac;
                            rest="${rest:2}"
                        ;;
                        \")
                            rest="${rest:1}";
                            break
                        ;;
                    esac;
                done
            ;;
        esac;
    done
}
__git_dwim_remote_heads () 
{ 
    local pfx="${1-}" cur_="${2-}" sfx="${3-}";
    local fer_pfx="${pfx//\%/%%}";
    __git for-each-ref --format="$fer_pfx%(refname:strip=3)$sfx" --sort="refname:strip=3" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "refs/remotes/*/$cur_*" "refs/remotes/*/$cur_*/**" | uniq -u
}
__git_eread () 
{ 
    test -r "$1" && IFS=$__git_CRLF read -r "$2" < "$1"
}
__git_find_last_on_cmdline () 
{ 
    local word c=$cword show_idx;
    while test $# -gt 1; do
        case "$1" in 
            --show-idx)
                show_idx=y
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    local wordlist="$1";
    while [ $c -gt "$__git_cmd_idx" ]; do
        ((c--));
        for word in $wordlist;
        do
            if [ "$word" = "${words[c]}" ]; then
                if [ -n "$show_idx" ]; then
                    echo "$c $word";
                else
                    echo "$word";
                fi;
                return;
            fi;
        done;
    done
}
__git_find_on_cmdline () 
{ 
    local word c="$__git_cmd_idx" show_idx;
    while test $# -gt 1; do
        case "$1" in 
            --show-idx)
                show_idx=y
            ;;
            *)
                return 1
            ;;
        esac;
        shift;
    done;
    local wordlist="$1";
    while [ $c -lt $cword ]; do
        for word in $wordlist;
        do
            if [ "$word" = "${words[c]}" ]; then
                if [ -n "${show_idx-}" ]; then
                    echo "$c $word";
                else
                    echo "$word";
                fi;
                return;
            fi;
        done;
        ((c++));
    done
}
__git_find_repo_path () 
{ 
    if [ -n "${__git_repo_path-}" ]; then
        return;
    fi;
    if [ -n "${__git_C_args-}" ]; then
        __git_repo_path="$(git "${__git_C_args[@]}" ${__git_dir:+--git-dir="$__git_dir"} rev-parse --absolute-git-dir 2> /dev/null)";
    else
        if [ -n "${__git_dir-}" ]; then
            test -d "$__git_dir" && __git_repo_path="$__git_dir";
        else
            if [ -n "${GIT_DIR-}" ]; then
                test -d "$GIT_DIR" && __git_repo_path="$GIT_DIR";
            else
                if [ -d .git ]; then
                    __git_repo_path=.git;
                else
                    __git_repo_path="$(git rev-parse --git-dir 2> /dev/null)";
                fi;
            fi;
        fi;
    fi
}
__git_find_subcommand () 
{ 
    local subcommand subcommands="$1" default_subcommand="$2";
    for subcommand in $subcommands;
    do
        if [ "$subcommand" = "${words[__git_cmd_idx+1]}" ]; then
            echo $subcommand;
            return;
        fi;
    done;
    echo $default_subcommand
}
__git_func_wrap () 
{ 
    local cur words cword prev;
    local __git_cmd_idx=0;
    _get_comp_words_by_ref -n =: cur words cword prev;
    $1
}
__git_get_config_variables () 
{ 
    local section="$1" i IFS='
';
    for i in $(__git config --name-only --get-regexp "^$section\..*");
    do
        echo "${i#$section.}";
    done
}
__git_get_option_value () 
{ 
    local c short_opt long_opt val;
    local result= values config_key word;
    short_opt="$1";
    long_opt="$2";
    values="$3";
    config_key="$4";
    ((c = $cword - 1));
    while [ $c -ge 0 ]; do
        word="${words[c]}";
        for val in $values;
        do
            if [ "$short_opt$val" = "$word" ] || [ "$long_opt$val" = "$word" ]; then
                result="$val";
                break 2;
            fi;
        done;
        ((c--));
    done;
    if [ -n "$config_key" ] && [ -z "$result" ]; then
        result="$(__git config "$config_key")";
    fi;
    echo "$result"
}
__git_has_doubledash () 
{ 
    local c=1;
    while [ $c -lt $cword ]; do
        if [ "--" = "${words[c]}" ]; then
            return 0;
        fi;
        ((c++));
    done;
    return 1
}
__git_have_func () 
{ 
    declare -f -- "$1" > /dev/null 2>&1
}
__git_heads () 
{ 
    local pfx="${1-}" cur_="${2-}" sfx="${3-}";
    __git for-each-ref --format="${pfx//\%/%%}%(refname:strip=2)$sfx" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "refs/heads/$cur_*" "refs/heads/$cur_*/**"
}
__git_index_files () 
{ 
    local root="$2" match="$3";
    __git_ls_files_helper "$root" "$1" "${match:-?}" | awk -F / -v pfx="${2//\\/\\\\}" '{
		paths[$1] = 1
	}
	END {
		for (p in paths) {
			if (substr(p, 1, 1) != "\"") {
				# No special characters, easy!
				print pfx p
				continue
			}

			# The path is quoted.
			p = dequote(p)
			if (p == "")
				continue

			# Even when a directory name itself does not contain
			# any special characters, it will still be quoted if
			# any of its (stripped) trailing path components do.
			# Because of this we may have seen the same directory
			# both quoted and unquoted.
			if (p in paths)
				# We have seen the same directory unquoted,
				# skip it.
				continue
			else
				print pfx p
		}
	}
	function dequote(p,    bs_idx, out, esc, esc_idx, dec) {
		# Skip opening double quote.
		p = substr(p, 2)

		# Interpret backslash escape sequences.
		while ((bs_idx = index(p, "\\")) != 0) {
			out = out substr(p, 1, bs_idx - 1)
			esc = substr(p, bs_idx + 1, 1)
			p = substr(p, bs_idx + 2)

			if ((esc_idx = index("abtvfr\"\\", esc)) != 0) {
				# C-style one-character escape sequence.
				out = out substr("\a\b\t\v\f\r\"\\",
						 esc_idx, 1)
			} else if (esc == "n") {
				# Uh-oh, a newline character.
				# We cannot reliably put a pathname
				# containing a newline into COMPREPLY,
				# and the newline would create a mess.
				# Skip this path.
				return ""
			} else {
				# Must be a \nnn octal value, then.
				dec = esc             * 64 + \
				      substr(p, 1, 1) * 8  + \
				      substr(p, 2, 1)
				out = out sprintf("%c", dec)
				p = substr(p, 3)
			}
		}
		# Drop closing double quote, if there is one.
		# (There is not any if this is a directory, as it was
		# already stripped with the trailing path components.)
		if (substr(p, length(p), 1) == "\"")
			out = out substr(p, 1, length(p) - 1)
		else
			out = out p

		return out
	}'
}
__git_indirect () 
{ 
    eval printf '%s' "\"\$$1\""
}
__git_is_configured_remote () 
{ 
    local remote;
    for remote in $(__git_remotes);
    do
        if [ "$remote" = "$1" ]; then
            return 0;
        fi;
    done;
    return 1
}
__git_list_merge_strategies () 
{ 
    LANG=C LC_ALL=C git merge -s help 2>&1 | sed -n -e '/[Aa]vailable strategies are: /,/^$/{
		s/\.$//
		s/.*://
		s/^[ 	]*//
		s/[ 	]*$//
		p
	}'
}
__git_ls_files_helper () 
{ 
    if [ "$2" = "--committable" ]; then
        __git -C "$1" -c core.quotePath=false diff-index --name-only --relative HEAD -- "${3//\\/\\\\}*";
    else
        __git -C "$1" -c core.quotePath=false ls-files --exclude-standard $2 -- "${3//\\/\\\\}*";
    fi
}
__git_main () 
{ 
    local i c=1 command __git_dir __git_repo_path;
    local __git_C_args C_args_count=0;
    local __git_cmd_idx;
    while [ $c -lt $cword ]; do
        i="${words[c]}";
        case "$i" in 
            --git-dir=*)
                __git_dir="${i#--git-dir=}"
            ;;
            --git-dir)
                ((c++));
                __git_dir="${words[c]}"
            ;;
            --bare)
                __git_dir="."
            ;;
            --help)
                command="help";
                break
            ;;
            -c | --work-tree | --namespace)
                ((c++))
            ;;
            -C)
                __git_C_args[C_args_count++]=-C;
                ((c++));
                __git_C_args[C_args_count++]="${words[c]}"
            ;;
            -*)

            ;;
            *)
                command="$i";
                __git_cmd_idx="$c";
                break
            ;;
        esac;
        ((c++));
    done;
    if [ -z "${command-}" ]; then
        case "$prev" in 
            --git-dir | -C | --work-tree)
                return
            ;;
            -c)
                __git_complete_config_variable_name_and_value;
                return
            ;;
            --namespace)
                return
            ;;
        esac;
        case "$cur" in 
            --*)
                __gitcomp "
			--paginate
			--no-pager
			--git-dir=
			--bare
			--version
			--exec-path
			--exec-path=
			--html-path
			--man-path
			--info-path
			--work-tree=
			--namespace=
			--no-replace-objects
			--help
			"
            ;;
            *)
                if test -n "${GIT_TESTING_PORCELAIN_COMMAND_LIST-}"; then
                    __gitcomp "$GIT_TESTING_PORCELAIN_COMMAND_LIST";
                else
                    local list_cmds=list-mainporcelain,others,nohelpers,alias,list-complete,config;
                    if test "${GIT_COMPLETION_SHOW_ALL_COMMANDS-}" = "1"; then
                        list_cmds=builtins,$list_cmds;
                    fi;
                    __gitcomp "$(__git --list-cmds=$list_cmds)";
                fi
            ;;
        esac;
        return;
    fi;
    __git_complete_command "$command" && return;
    local expansion=$(__git_aliased_command "$command");
    if [ -n "$expansion" ]; then
        words[1]=$expansion;
        __git_complete_command "$expansion";
    fi
}
__git_match_ctag () 
{ 
    awk -v pfx="${3-}" -v sfx="${4-}" "
		/^${1//\//\\/}/ { print pfx \$1 sfx }
		" "$2"
}
__git_pretty_aliases () 
{ 
    __git_get_config_variables "pretty"
}
__git_ps1 () 
{ 
    local exit="$?";
    local pcmode=no;
    local detached=no;
    local ps1pc_start='\u@\h:\w ';
    local ps1pc_end='\$ ';
    local printf_format=' (%s)';
    case "$#" in 
        2 | 3)
            pcmode=yes;
            ps1pc_start="$1";
            ps1pc_end="$2";
            printf_format="${3:-$printf_format}";
            PS1="$ps1pc_start$ps1pc_end"
        ;;
        0 | 1)
            printf_format="${1:-$printf_format}"
        ;;
        *)
            return "$exit"
        ;;
    esac;
    local ps1_expanded=yes;
    [ -z "${ZSH_VERSION-}" ] || eval '[[ -o PROMPT_SUBST ]]' || ps1_expanded=no;
    [ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no;
    local repo_info rev_parse_exit_code;
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --show-ref-format --short HEAD 2> /dev/null)";
    rev_parse_exit_code="$?";
    if [ -z "$repo_info" ]; then
        return "$exit";
    fi;
    local LF="$__git_LF";
    local short_sha="";
    if [ "$rev_parse_exit_code" = "0" ]; then
        short_sha="${repo_info##*$LF}";
        repo_info="${repo_info%$LF*}";
    fi;
    local ref_format="${repo_info##*$LF}";
    repo_info="${repo_info%$LF*}";
    local inside_worktree="${repo_info##*$LF}";
    repo_info="${repo_info%$LF*}";
    local bare_repo="${repo_info##*$LF}";
    repo_info="${repo_info%$LF*}";
    local inside_gitdir="${repo_info##*$LF}";
    local g="${repo_info%$LF*}";
    if [ "true" = "$inside_worktree" ] && [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] && [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] && git check-ignore -q .; then
        return "$exit";
    fi;
    local sparse="";
    if [ -z "${GIT_PS1_COMPRESSSPARSESTATE-}" ] && [ -z "${GIT_PS1_OMITSPARSESTATE-}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
        sparse="|SPARSE";
    fi;
    local r="";
    local b="";
    local step="";
    local total="";
    if [ -d "$g/rebase-merge" ]; then
        __git_eread "$g/rebase-merge/head-name" b;
        __git_eread "$g/rebase-merge/msgnum" step;
        __git_eread "$g/rebase-merge/end" total;
        r="|REBASE";
    else
        if [ -d "$g/rebase-apply" ]; then
            __git_eread "$g/rebase-apply/next" step;
            __git_eread "$g/rebase-apply/last" total;
            if [ -f "$g/rebase-apply/rebasing" ]; then
                __git_eread "$g/rebase-apply/head-name" b;
                r="|REBASE";
            else
                if [ -f "$g/rebase-apply/applying" ]; then
                    r="|AM";
                else
                    r="|AM/REBASE";
                fi;
            fi;
        else
            if [ -f "$g/MERGE_HEAD" ]; then
                r="|MERGING";
            else
                if __git_sequencer_status; then
                    :;
                else
                    if [ -f "$g/BISECT_LOG" ]; then
                        r="|BISECTING";
                    fi;
                fi;
            fi;
        fi;
        if [ -n "$b" ]; then
            :;
        else
            if [ -h "$g/HEAD" ]; then
                b="$(git symbolic-ref HEAD 2> /dev/null)";
            else
                local head="";
                case "$ref_format" in 
                    files)
                        if ! __git_eread "$g/HEAD" head; then
                            return "$exit";
                        fi;
                        case $head in 
                            "ref: "*)
                                head="${head#ref: }"
                            ;;
                            *)
                                head=""
                            ;;
                        esac
                    ;;
                    *)
                        head="$(git symbolic-ref HEAD 2> /dev/null)"
                    ;;
                esac;
                if test -z "$head"; then
                    detached=yes;
                    b="$(case "${GIT_PS1_DESCRIBE_STYLE-}" in 
    contains)
        git describe --contains HEAD
    ;;
    branch)
        git describe --contains --all HEAD
    ;;
    tag)
        git describe --tags HEAD
    ;;
    describe)
        git describe HEAD
    ;;
    * | default)
        git describe --tags --exact-match HEAD
    ;;
esac 2> /dev/null)" || b="$short_sha...";
                    b="($b)";
                else
                    b="$head";
                fi;
            fi;
        fi;
    fi;
    if [ -n "$step" ] && [ -n "$total" ]; then
        r="$r $step/$total";
    fi;
    local conflict="";
    if [ "${GIT_PS1_SHOWCONFLICTSTATE-}" = "yes" ] && [ "$(git ls-files --unmerged 2> /dev/null)" ]; then
        conflict="|CONFLICT";
    fi;
    local w="";
    local i="";
    local s="";
    local u="";
    local h="";
    local c="";
    local p="";
    local upstream="";
    if [ "true" = "$inside_gitdir" ]; then
        if [ "true" = "$bare_repo" ]; then
            c="BARE:";
        else
            b="GIT_DIR!";
        fi;
    else
        if [ "true" = "$inside_worktree" ]; then
            if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] && [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
                git diff --no-ext-diff --quiet || w="*";
                git diff --no-ext-diff --cached --quiet || i="+";
                if [ -z "$short_sha" ] && [ -z "$i" ]; then
                    i="#";
                fi;
            fi;
            if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] && git rev-parse --verify --quiet refs/stash > /dev/null; then
                s="$";
            fi;
            if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] && [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] && git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' > /dev/null 2> /dev/null; then
                u="%${ZSH_VERSION+%}";
            fi;
            if [ -n "${GIT_PS1_COMPRESSSPARSESTATE-}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]; then
                h="?";
            fi;
            if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
                __git_ps1_show_upstream;
            fi;
        fi;
    fi;
    local z="${GIT_PS1_STATESEPARATOR- }";
    b=${b##refs/heads/};
    if [ "$pcmode" = yes ] && [ "$ps1_expanded" = yes ]; then
        __git_ps1_branch_name=$b;
        b="\${__git_ps1_branch_name}";
    fi;
    if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
        __git_ps1_colorize_gitstring;
    fi;
    local f="$h$w$i$s$u$p";
    local gitstring="$c$b${f:+$z$f}${sparse}$r${upstream}${conflict}";
    if [ "$pcmode" = yes ]; then
        if [ "${__git_printf_supports_v-}" != yes ]; then
            gitstring=$(printf -- "$printf_format" "$gitstring");
        else
            printf -v gitstring -- "$printf_format" "$gitstring";
        fi;
        PS1="$ps1pc_start$gitstring$ps1pc_end";
    else
        printf -- "$printf_format" "$gitstring";
    fi;
    return "$exit"
}
__git_ps1_colorize_gitstring () 
{ 
    if [ -n "${ZSH_VERSION-}" ]; then
        local c_red='%F{red}';
        local c_green='%F{green}';
        local c_lblue='%F{blue}';
        local c_clear='%f';
    else
        local c_pre="${GIT_PS1_COLOR_PRE-$__git_SOH}${__git_ESC}[";
        local c_post="m${GIT_PS1_COLOR_POST-$__git_STX}";
        local c_red="${c_pre}31${c_post}";
        local c_green="${c_pre}32${c_post}";
        local c_lblue="${c_pre}1;34${c_post}";
        local c_clear="${c_pre}0${c_post}";
    fi;
    local bad_color="$c_red";
    local ok_color="$c_green";
    local flags_color="$c_lblue";
    local branch_color="";
    if [ "$detached" = no ]; then
        branch_color="$ok_color";
    else
        branch_color="$bad_color";
    fi;
    if [ -n "$c" ]; then
        c="$branch_color$c$c_clear";
    fi;
    b="$branch_color$b$c_clear";
    if [ -n "$w" ]; then
        w="$bad_color$w$c_clear";
    fi;
    if [ -n "$i" ]; then
        i="$ok_color$i$c_clear";
    fi;
    if [ -n "$s" ]; then
        s="$flags_color$s$c_clear";
    fi;
    if [ -n "$u" ]; then
        u="$bad_color$u$c_clear";
    fi
}
__git_ps1_show_upstream () 
{ 
    local key value;
    local svn_remotes="" svn_url_pattern="" count n;
    local upstream_type=git legacy="" verbose="" name="";
    local LF="$__git_LF";
    local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2> /dev/null | tr '\0\n' '\n ')";
    while read -r key value; do
        case "$key" in 
            bash.showupstream)
                GIT_PS1_SHOWUPSTREAM="$value";
                if [ -z "${GIT_PS1_SHOWUPSTREAM}" ]; then
                    p="";
                    return;
                fi
            ;;
            svn-remote.*.url)
                svn_remotes=${svn_remotes}${value}${LF};
                svn_url_pattern="$svn_url_pattern\\|$value";
                upstream_type=svn+git
            ;;
        esac;
    done <<-OUTPUT
$output
OUTPUT

    local option;
    for option in ${GIT_PS1_SHOWUPSTREAM-};
    do
        case "$option" in 
            git | svn)
                upstream_type="$option"
            ;;
            verbose)
                verbose=1
            ;;
            legacy)
                legacy=1
            ;;
            name)
                name=1
            ;;
        esac;
    done;
    case "$upstream_type" in 
        git)
            upstream_type="@{upstream}"
        ;;
        svn*)
            local svn_upstream="$(git log --first-parent -1 --grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2> /dev/null)";
            if [ -n "$svn_upstream" ]; then
                svn_upstream=${svn_upstream##*$LF};
                svn_upstream=${svn_upstream#*: };
                svn_upstream=${svn_upstream%@*};
                case ${LF}${svn_remotes} in 
                    *"${LF}${svn_upstream}${LF}"*)
                        upstream_type=${GIT_SVN_ID:-git-svn}
                    ;;
                    *)
                        upstream_type=${svn_upstream#/}
                    ;;
                esac;
            else
                if [ "svn+git" = "$upstream_type" ]; then
                    upstream_type="@{upstream}";
                fi;
            fi
        ;;
    esac;
    if [ -z "$legacy" ]; then
        count="$(git rev-list --count --left-right "$upstream_type"...HEAD 2> /dev/null)";
    else
        local commits;
        if commits="$(git rev-list --left-right "$upstream_type"...HEAD 2> /dev/null)"; then
            local commit behind=0 ahead=0;
            for commit in $commits;
            do
                case "$commit" in 
                    "<"*)
                        behind=$((behind+1))
                    ;;
                    *)
                        ahead=$((ahead+1))
                    ;;
                esac;
            done;
            count="$behind	$ahead";
        else
            count="";
        fi;
    fi;
    if [ -z "$verbose" ]; then
        case "$count" in 
            "")
                p=""
            ;;
            "0	0")
                p="="
            ;;
            "0	"*)
                p=">"
            ;;
            *"	0")
                p="<"
            ;;
            *)
                p="<>"
            ;;
        esac;
    else
        case "$count" in 
            "")
                upstream=""
            ;;
            "0	0")
                upstream="|u="
            ;;
            "0	"*)
                upstream="|u+${count#0	}"
            ;;
            *"	0")
                upstream="|u-${count%	0}"
            ;;
            *)
                upstream="|u+${count#*	}-${count%	*}"
            ;;
        esac;
        if [ -n "$count" ] && [ -n "$name" ]; then
            __git_ps1_upstream_name=$(git rev-parse --abbrev-ref "$upstream_type" 2> /dev/null);
            if [ "$pcmode" = yes ] && [ "$ps1_expanded" = yes ]; then
                upstream="$upstream \${__git_ps1_upstream_name}";
            else
                upstream="$upstream ${__git_ps1_upstream_name}";
                unset __git_ps1_upstream_name;
            fi;
        fi;
    fi
}
__git_pseudoref_exists () 
{ 
    local ref=$1;
    local head;
    __git_find_repo_path;
    if __git_eread "$__git_repo_path/HEAD" head; then
        if [ "$head" == "ref: refs/heads/.invalid" ]; then
            __git show-ref --exists "$ref";
            return $?;
        fi;
    fi;
    [ -f "$__git_repo_path/$ref" ]
}
__git_reassemble_comp_words_by_ref () 
{ 
    local exclude i j first;
    exclude="${1//[^$COMP_WORDBREAKS]}";
    cword_=$COMP_CWORD;
    if [ -z "$exclude" ]; then
        words_=("${COMP_WORDS[@]}");
        return;
    fi;
    for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++))
    do
        first=t;
        while [ $i -gt 0 ] && [ -n "${COMP_WORDS[$i]}" ] && [ "${COMP_WORDS[$i]//[^$exclude]}" = "${COMP_WORDS[$i]}" ]; do
            if [ $j -ge 2 ] && [ -n "$first" ]; then
                ((j--));
            fi;
            first=;
            words_[$j]=${words_[j]}${COMP_WORDS[i]};
            if [ $i = $COMP_CWORD ]; then
                cword_=$j;
            fi;
            if (($i < ${#COMP_WORDS[@]} - 1)); then
                ((i++));
            else
                return;
            fi;
        done;
        words_[$j]=${words_[j]}${COMP_WORDS[i]};
        if [ $i = $COMP_CWORD ]; then
            cword_=$j;
        fi;
    done
}
__git_refs () 
{ 
    local i hash dir track="${2-}";
    local list_refs_from=path remote="${1-}";
    local format refs;
    local pfx="${3-}" cur_="${4-$cur}" sfx="${5-}";
    local match="${4-}";
    local umatch="${4-}";
    local fer_pfx="${pfx//\%/%%}";
    __git_find_repo_path;
    dir="$__git_repo_path";
    if [ -z "$remote" ]; then
        if [ -z "$dir" ]; then
            return;
        fi;
    else
        if __git_is_configured_remote "$remote"; then
            list_refs_from=remote;
        else
            if [ -d "$remote/.git" ]; then
                dir="$remote/.git";
            else
                if [ -d "$remote" ]; then
                    dir="$remote";
                else
                    list_refs_from=url;
                fi;
            fi;
        fi;
    fi;
    if test "${GIT_COMPLETION_IGNORE_CASE:+1}" = "1"; then
        umatch=$(echo "$match" | tr a-z A-Z 2> /dev/null || echo "$match");
    fi;
    if [ "$list_refs_from" = path ]; then
        if [[ "$cur_" == ^* ]]; then
            pfx="$pfx^";
            fer_pfx="$fer_pfx^";
            cur_=${cur_#^};
            match=${match#^};
            umatch=${umatch#^};
        fi;
        case "$cur_" in 
            refs | refs/*)
                format="refname";
                refs=("$match*" "$match*/**");
                track=""
            ;;
            *)
                for i in HEAD FETCH_HEAD ORIG_HEAD MERGE_HEAD REBASE_HEAD CHERRY_PICK_HEAD REVERT_HEAD BISECT_HEAD AUTO_MERGE;
                do
                    case "$i" in 
                        $match* | $umatch*)
                            if [ -e "$dir/$i" ]; then
                                echo "$pfx$i$sfx";
                            fi
                        ;;
                    esac;
                done;
                format="refname:strip=2";
                refs=("refs/tags/$match*" "refs/tags/$match*/**" "refs/heads/$match*" "refs/heads/$match*/**" "refs/remotes/$match*" "refs/remotes/$match*/**")
            ;;
        esac;
        __git_dir="$dir" __git for-each-ref --format="$fer_pfx%($format)$sfx" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "${refs[@]}";
        if [ -n "$track" ]; then
            __git_dwim_remote_heads "$pfx" "$match" "$sfx";
        fi;
        return;
    fi;
    case "$cur_" in 
        refs | refs/*)
            __git ls-remote "$remote" "$match*" | while read -r hash i; do
                case "$i" in 
                    *^{})

                    ;;
                    *)
                        echo "$pfx$i$sfx"
                    ;;
                esac;
            done
        ;;
        *)
            if [ "$list_refs_from" = remote ]; then
                case "HEAD" in 
                    $match* | $umatch*)
                        echo "${pfx}HEAD$sfx"
                    ;;
                esac;
                __git for-each-ref --format="$fer_pfx%(refname:strip=3)$sfx" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "refs/remotes/$remote/$match*" "refs/remotes/$remote/$match*/**";
            else
                local query_symref;
                case "HEAD" in 
                    $match* | $umatch*)
                        query_symref="HEAD"
                    ;;
                esac;
                __git ls-remote "$remote" $query_symref "refs/tags/$match*" "refs/heads/$match*" "refs/remotes/$match*" | while read -r hash i; do
                    case "$i" in 
                        *^{})

                        ;;
                        refs/*)
                            echo "$pfx${i#refs/*/}$sfx"
                        ;;
                        *)
                            echo "$pfx$i$sfx"
                        ;;
                    esac;
                done;
            fi
        ;;
    esac
}
__git_refs2 () 
{ 
    local i;
    for i in $(__git_refs "$1");
    do
        echo "$i:$i";
    done
}
__git_refs_remotes () 
{ 
    local i hash;
    __git ls-remote "$1" 'refs/heads/*' | while read -r hash i; do
        echo "$i:refs/remotes/$1/${i#refs/heads/}";
    done
}
__git_remote_heads () 
{ 
    local pfx="${1-}" cur_="${2-}" sfx="${3-}";
    __git for-each-ref --format="${pfx//\%/%%}%(refname:strip=2)$sfx" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "refs/remotes/$cur_*" "refs/remotes/$cur_*/**"
}
__git_remotes () 
{ 
    __git_find_repo_path;
    test -d "$__git_repo_path/remotes" && ls -F --color=auto --show-control-chars -1 "$__git_repo_path/remotes";
    __git remote
}
__git_resolve_builtins () 
{ 
    local cmd="$1";
    local incl="${2-}";
    local excl="${3-}";
    local var=__gitcomp_builtin_"${cmd//-/_}";
    local options;
    eval "options=\${$var-}";
    if [ -z "$options" ]; then
        local completion_helper;
        if [ "${GIT_COMPLETION_SHOW_ALL-}" = "1" ]; then
            completion_helper="--git-completion-helper-all";
        else
            completion_helper="--git-completion-helper";
        fi;
        options=" $incl $(__git ${cmd/_/ } $completion_helper) " || return;
        for i in $excl;
        do
            options="${options/ $i / }";
        done;
        eval "$var=\"$options\"";
    fi;
    ___git_resolved_builtins="$options"
}
__git_sequencer_status () 
{ 
    local todo;
    if test -f "$g/CHERRY_PICK_HEAD"; then
        r="|CHERRY-PICKING";
        return 0;
    else
        if test -f "$g/REVERT_HEAD"; then
            r="|REVERTING";
            return 0;
        else
            if __git_eread "$g/sequencer/todo" todo; then
                case "$todo" in 
                    p[\ \	] | pick[\ \	]*)
                        r="|CHERRY-PICKING";
                        return 0
                    ;;
                    revert[\ \	]*)
                        r="|REVERTING";
                        return 0
                    ;;
                esac;
            fi;
        fi;
    fi;
    return 1
}
__git_support_parseopt_helper () 
{ 
    test -n "$__git_cmds_with_parseopt_helper" || __git_cmds_with_parseopt_helper="$(__git --list-cmds=parseopt)";
    case " $__git_cmds_with_parseopt_helper " in 
        *" $1 "*)
            return 0
        ;;
        *)
            return 1
        ;;
    esac
}
__git_tags () 
{ 
    local pfx="${1-}" cur_="${2-}" sfx="${3-}";
    __git for-each-ref --format="${pfx//\%/%%}%(refname:strip=2)$sfx" ${GIT_COMPLETION_IGNORE_CASE+--ignore-case} "refs/tags/$cur_*" "refs/tags/$cur_*/**"
}
__git_trailer_tokens () 
{ 
    __git config --name-only --get-regexp '^trailer\..*\.key$' | cut -d. -f 2- | rev | cut -d. -f2- | rev
}
__git_wrap__git_main () 
{ 
    __git_func_wrap __git_main
}
__git_wrap__gitk_main () 
{ 
    __git_func_wrap __gitk_main
}
__gitcomp () 
{ 
    local cur_="${3-$cur}";
    case "$cur_" in 
        *=)

        ;;
        --no-*)
            local c i=0 IFS=' 	
';
            for c in $1;
            do
                if [[ $c == "--" ]]; then
                    continue;
                fi;
                c="$c${4-}";
                if [[ $c == "$cur_"* ]]; then
                    case $c in 
                        --*= | *.)

                        ;;
                        *)
                            c="$c "
                        ;;
                    esac;
                    COMPREPLY[i++]="${2-}$c";
                fi;
            done
        ;;
        *)
            local c i=0 IFS=' 	
';
            for c in $1;
            do
                if [[ $c == "--" ]]; then
                    c="--no-...${4-}";
                    if [[ $c == "$cur_"* ]]; then
                        COMPREPLY[i++]="${2-}$c ";
                    fi;
                    break;
                fi;
                c="$c${4-}";
                if [[ $c == "$cur_"* ]]; then
                    case $c in 
                        *= | *.)

                        ;;
                        *)
                            c="$c "
                        ;;
                    esac;
                    COMPREPLY[i++]="${2-}$c";
                fi;
            done
        ;;
    esac
}
__gitcomp_builtin () 
{ 
    __git_resolve_builtins "$1" "$2" "$3";
    __gitcomp "$___git_resolved_builtins"
}
__gitcomp_direct () 
{ 
    local IFS='
';
    COMPREPLY=($1)
}
__gitcomp_direct_append () 
{ 
    local IFS='
';
    COMPREPLY+=($1)
}
__gitcomp_directories () 
{ 
    local _tmp_dir _tmp_completions _found=0;
    [[ "$cur" =~ .*/ ]];
    _tmp_dir=$BASH_REMATCH;
    while IFS= read -r -d '' c; do
        if [[ $c == "$cur"* ]]; then
            COMPREPLY+=("$c/");
            _found=1;
        fi;
    done < <(__git ls-tree -z -d --name-only HEAD $_tmp_dir);
    if [[ $_found == 0 ]] && [[ "$cur" =~ /$ ]]; then
        __gitcomp_direct_append "$cur ";
    else
        if [[ $_found == 0 ]]; then
            COMPREPLY=("");
        fi;
    fi
}
__gitcomp_file () 
{ 
    local IFS='
';
    __gitcompadd "$1" "${2-}" "${3-$cur}" "";
    compopt -o filenames +o nospace 2> /dev/null || compgen -f /non-existing-dir/ > /dev/null || true
}
__gitcomp_file_direct () 
{ 
    local IFS='
';
    COMPREPLY=($1);
    compopt -o filenames +o nospace 2> /dev/null || compgen -f /non-existing-dir/ > /dev/null || true
}
__gitcomp_nl () 
{ 
    COMPREPLY=();
    __gitcomp_nl_append "$@"
}
__gitcomp_nl_append () 
{ 
    local IFS='
';
    __gitcompappend "$1" "${2-}" "${3-$cur}" "${4- }"
}
__gitcomp_slash_leading_paths () 
{ 
    local dequoted_word pfx="" cur_ toplevel;
    toplevel="$(git rev-parse --show-toplevel)/";
    __git_dequote "$cur";
    case "$cur" in 
        /*)
            cur="${cur:1}"
        ;;
        *)
            pfx="$(__git rev-parse --show-prefix)"
        ;;
    esac;
    completions="$(__git -C "${toplevel}" -c core.quotePath=false ls-files --cached -- "${pfx}${cur}*" | sed -e s%^%/% -e 's%$% %')";
    if test -n "$completions"; then
        local IFS='
';
        COMPREPLY=($completions);
    else
        COMPREPLY=("");
    fi
}
__gitcompadd () 
{ 
    COMPREPLY=();
    __gitcompappend "$@"
}
__gitcompappend () 
{ 
    local x i=${#COMPREPLY[@]};
    for x in $1;
    do
        if [[ "$x" == "$3"* ]]; then
            COMPREPLY[i++]="$2$x$4";
        fi;
    done
}
__gitdir () 
{ 
    if [ -z "${1-}" ]; then
        __git_find_repo_path || return 1;
        echo "$__git_repo_path";
    else
        if [ -d "$1/.git" ]; then
            echo "$1/.git";
        else
            echo "$1";
        fi;
    fi
}
__gitk_main () 
{ 
    __git_has_doubledash && return;
    local __git_repo_path;
    __git_find_repo_path;
    local merge="";
    if __git_pseudoref_exists MERGE_HEAD; then
        merge="--merge";
    fi;
    case "$cur" in 
        --*)
            __gitcomp "
			$__git_log_common_options
			$__git_log_gitk_options
			$merge
			";
            return
        ;;
    esac;
    __git_complete_revlist
}
_get_comp_words_by_ref () 
{ 
    local exclude cur_ words_ cword_;
    if [ "$1" = "-n" ]; then
        exclude=$2;
        shift 2;
    fi;
    __git_reassemble_comp_words_by_ref "$exclude";
    cur_=${words_[cword_]};
    while [ $# -gt 0 ]; do
        case "$1" in 
            cur)
                cur=$cur_
            ;;
            prev)
                prev=${words_[$cword_-1]}
            ;;
            words)
                words=("${words_[@]}")
            ;;
            cword)
                cword=$cword_
            ;;
        esac;
        shift;
    done
}
_git_add () 
{ 
    case "$cur" in 
        --chmod=*)
            __gitcomp "+x -x" "" "${cur##--chmod=}";
            return
        ;;
        --*)
            __gitcomp_builtin add;
            return
        ;;
    esac;
    local complete_opt="--others --modified --directory --no-empty-directory";
    if test -n "$(__git_find_on_cmdline "-u --update")"; then
        complete_opt="--modified";
    fi;
    __git_complete_index_file "$complete_opt"
}
_git_am () 
{ 
    __git_find_repo_path;
    if [ -d "$__git_repo_path"/rebase-apply ]; then
        __gitcomp "$__git_am_inprogress_options";
        return;
    fi;
    case "$cur" in 
        --whitespace=*)
            __gitcomp "$__git_whitespacelist" "" "${cur##--whitespace=}";
            return
        ;;
        --patch-format=*)
            __gitcomp "$__git_patchformat" "" "${cur##--patch-format=}";
            return
        ;;
        --show-current-patch=*)
            __gitcomp "$__git_showcurrentpatch" "" "${cur##--show-current-patch=}";
            return
        ;;
        --quoted-cr=*)
            __gitcomp "$__git_quoted_cr" "" "${cur##--quoted-cr=}";
            return
        ;;
        --*)
            __gitcomp_builtin am "" "$__git_am_inprogress_options";
            return
        ;;
    esac
}
_git_apply () 
{ 
    case "$cur" in 
        --whitespace=*)
            __gitcomp "$__git_whitespacelist" "" "${cur##--whitespace=}";
            return
        ;;
        --*)
            __gitcomp_builtin apply;
            return
        ;;
    esac
}
_git_archive () 
{ 
    case "$cur" in 
        --format=*)
            __gitcomp "$(git archive --list)" "" "${cur##--format=}";
            return
        ;;
        --remote=*)
            __gitcomp_nl "$(__git_remotes)" "" "${cur##--remote=}";
            return
        ;;
        --*)
            __gitcomp_builtin archive "--format= --list --verbose --prefix= --worktree-attributes";
            return
        ;;
    esac;
    __git_complete_file
}
_git_bisect () 
{ 
    __git_has_doubledash && return;
    __git_find_repo_path;
    local term_bad term_good;
    if [ -f "$__git_repo_path"/BISECT_TERMS ]; then
        term_bad=$(__git bisect terms --term-bad);
        term_good=$(__git bisect terms --term-good);
    fi;
    local completable_subcommands="start bad new $term_bad good old $term_good terms skip reset visualize replay log run help";
    local all_subcommands="$completable_subcommands view";
    local subcommand="$(__git_find_on_cmdline "$all_subcommands")";
    if [ -z "$subcommand" ]; then
        __git_find_repo_path;
        if [ -f "$__git_repo_path"/BISECT_START ]; then
            __gitcomp "$completable_subcommands";
        else
            __gitcomp "replay start";
        fi;
        return;
    fi;
    case "$subcommand" in 
        start)
            case "$cur" in 
                --*)
                    __gitcomp "--first-parent --no-checkout --term-new --term-bad --term-old --term-good";
                    return
                ;;
                *)
                    __git_complete_refs
                ;;
            esac
        ;;
        terms)
            __gitcomp "--term-good --term-old --term-bad --term-new";
            return
        ;;
        visualize | view)
            __git_complete_log_opts;
            return
        ;;
        bad | new | "$term_bad" | good | old | "$term_good" | reset | skip)
            __git_complete_refs
        ;;
        *)

        ;;
    esac
}
_git_branch () 
{ 
    local i c="$__git_cmd_idx" only_local_ref="n" has_r="n";
    while [ $c -lt $cword ]; do
        i="${words[c]}";
        case "$i" in 
            -d | -D | --delete | -m | -M | --move | -c | -C | --copy)
                only_local_ref="y"
            ;;
            -r | --remotes)
                has_r="y"
            ;;
        esac;
        ((c++));
    done;
    case "$cur" in 
        --set-upstream-to=*)
            __git_complete_refs --cur="${cur##--set-upstream-to=}"
        ;;
        --*)
            __gitcomp_builtin branch
        ;;
        *)
            if [ $only_local_ref = "y" -a $has_r = "n" ]; then
                __gitcomp_direct "$(__git_heads "" "$cur" " ")";
            else
                __git_complete_refs;
            fi
        ;;
    esac
}
_git_bundle () 
{ 
    local cmd="${words[__git_cmd_idx+1]}";
    case "$cword" in 
        $((__git_cmd_idx+1)))
            __gitcomp "create list-heads verify unbundle"
        ;;
        $((__git_cmd_idx+2)))

        ;;
        *)
            case "$cmd" in 
                create)
                    __git_complete_revlist
                ;;
            esac
        ;;
    esac
}
_git_checkout () 
{ 
    __git_has_doubledash && return;
    local dwim_opt="$(__git_checkout_default_dwim_mode)";
    case "$prev" in 
        -b | -B | --orphan)
            __git_complete_refs $dwim_opt --mode="heads";
            return
        ;;
        *)

        ;;
    esac;
    case "$cur" in 
        --conflict=*)
            __gitcomp "diff3 merge zdiff3" "" "${cur##--conflict=}"
        ;;
        --*)
            __gitcomp_builtin checkout
        ;;
        *)
            if [ -n "$(__git_find_on_cmdline "-b -B -d --detach --orphan")" ]; then
                __git_complete_refs --mode="refs";
            else
                if [ -n "$(__git_find_on_cmdline "-t --track")" ]; then
                    __git_complete_refs --mode="remote-heads";
                else
                    __git_complete_refs $dwim_opt --mode="refs";
                fi;
            fi
        ;;
    esac
}
_git_cherry_pick () 
{ 
    if __git_pseudoref_exists CHERRY_PICK_HEAD; then
        __gitcomp "$__git_cherry_pick_inprogress_options";
        return;
    fi;
    __git_complete_strategy && return;
    case "$cur" in 
        --*)
            __gitcomp_builtin cherry-pick "" "$__git_cherry_pick_inprogress_options"
        ;;
        *)
            __git_complete_refs
        ;;
    esac
}
_git_clean () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin clean;
            return
        ;;
    esac;
    __git_complete_index_file "--others --directory"
}
_git_clone () 
{ 
    case "$prev" in 
        -c | --config)
            __git_complete_config_variable_name_and_value;
            return
        ;;
    esac;
    case "$cur" in 
        --config=*)
            __git_complete_config_variable_name_and_value --cur="${cur##--config=}";
            return
        ;;
        --*)
            __gitcomp_builtin clone;
            return
        ;;
    esac
}
_git_commit () 
{ 
    case "$prev" in 
        -c | -C)
            __git_complete_refs;
            return
        ;;
    esac;
    case "$cur" in 
        --cleanup=*)
            __gitcomp "default scissors strip verbatim whitespace
			" "" "${cur##--cleanup=}";
            return
        ;;
        --reuse-message=* | --reedit-message=* | --fixup=* | --squash=*)
            __git_complete_refs --cur="${cur#*=}";
            return
        ;;
        --untracked-files=*)
            __gitcomp "$__git_untracked_file_modes" "" "${cur##--untracked-files=}";
            return
        ;;
        --trailer=*)
            __gitcomp_nl "$(__git_trailer_tokens)" "" "${cur##--trailer=}" ":";
            return
        ;;
        --*)
            __gitcomp_builtin commit;
            return
        ;;
    esac;
    if __git rev-parse --verify --quiet HEAD > /dev/null; then
        __git_complete_index_file "--committable";
    else
        __git_complete_index_file "--cached";
    fi
}
_git_config () 
{ 
    local subcommands subcommand;
    __git_resolve_builtins "config";
    subcommands="$___git_resolved_builtins";
    subcommand="$(__git_find_subcommand "$subcommands")";
    if [ -z "$subcommand" ]; then
        __gitcomp "$subcommands";
        return;
    fi;
    case "$cur" in 
        --*)
            __gitcomp_builtin "config_$subcommand";
            return
        ;;
    esac;
    case "$subcommand" in 
        get)
            __gitcomp_nl "$(__git_config_get_set_variables)"
        ;;
        set)
            case "$prev" in 
                *.*)
                    __git_complete_config_variable_value
                ;;
                *)
                    __git_complete_config_variable_name
                ;;
            esac
        ;;
        unset)
            __gitcomp_nl "$(__git_config_get_set_variables)"
        ;;
    esac
}
_git_describe () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin describe;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_diff () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --diff-algorithm=*)
            __gitcomp "$__git_diff_algorithms" "" "${cur##--diff-algorithm=}";
            return
        ;;
        --submodule=*)
            __gitcomp "$__git_diff_submodule_formats" "" "${cur##--submodule=}";
            return
        ;;
        --color-moved=*)
            __gitcomp "$__git_color_moved_opts" "" "${cur##--color-moved=}";
            return
        ;;
        --color-moved-ws=*)
            __gitcomp "$__git_color_moved_ws_opts" "" "${cur##--color-moved-ws=}";
            return
        ;;
        --ws-error-highlight=*)
            __gitcomp "$__git_ws_error_highlight_opts" "" "${cur##--ws-error-highlight=}";
            return
        ;;
        --*)
            __gitcomp "$__git_diff_difftool_options";
            return
        ;;
    esac;
    __git_complete_revlist_file
}
_git_difftool () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --tool=*)
            __gitcomp "$__git_mergetools_common kompare" "" "${cur##--tool=}";
            return
        ;;
        --*)
            __gitcomp_builtin difftool "$__git_diff_difftool_options";
            return
        ;;
    esac;
    __git_complete_revlist_file
}
_git_fetch () 
{ 
    case "$cur" in 
        --recurse-submodules=*)
            __gitcomp "$__git_fetch_recurse_submodules" "" "${cur##--recurse-submodules=}";
            return
        ;;
        --filter=*)
            __gitcomp "blob:none blob:limit= sparse:oid=" "" "${cur##--filter=}";
            return
        ;;
        --*)
            __gitcomp_builtin fetch;
            return
        ;;
    esac;
    __git_complete_remote_or_refspec
}
_git_format_patch () 
{ 
    case "$cur" in 
        --thread=*)
            __gitcomp "
			deep shallow
			" "" "${cur##--thread=}";
            return
        ;;
        --base=* | --interdiff=* | --range-diff=*)
            __git_complete_refs --cur="${cur#--*=}";
            return
        ;;
        --*)
            __gitcomp_builtin format-patch "$__git_format_patch_extra_options";
            return
        ;;
    esac;
    __git_complete_revlist
}
_git_fsck () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin fsck;
            return
        ;;
    esac
}
_git_gitk () 
{ 
    __gitk_main
}
_git_grep () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --*)
            __gitcomp_builtin grep;
            return
        ;;
    esac;
    case "$cword,$prev" in 
        $((__git_cmd_idx+1)),* | *,-*)
            __git_complete_symbol && return
        ;;
    esac;
    __git_complete_refs
}
_git_help () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin help;
            return
        ;;
    esac;
    if test -n "${GIT_TESTING_ALL_COMMAND_LIST-}"; then
        __gitcomp "$GIT_TESTING_ALL_COMMAND_LIST $(__git --list-cmds=alias,list-guide) gitk";
    else
        __gitcomp "$(__git --list-cmds=main,nohelpers,alias,list-guide) gitk";
    fi
}
_git_init () 
{ 
    case "$cur" in 
        --shared=*)
            __gitcomp "
			false true umask group all world everybody
			" "" "${cur##--shared=}";
            return
        ;;
        --*)
            __gitcomp_builtin init;
            return
        ;;
    esac
}
_git_log () 
{ 
    __git_has_doubledash && return;
    __git_find_repo_path;
    __git_complete_log_opts;
    [ ${#COMPREPLY[@]} -eq 0 ] || return;
    __git_complete_revlist
}
_git_ls_files () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin ls-files;
            return
        ;;
    esac;
    __git_complete_index_file "--cached"
}
_git_ls_remote () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin ls-remote;
            return
        ;;
    esac;
    __gitcomp_nl "$(__git_remotes)"
}
_git_ls_tree () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin ls-tree;
            return
        ;;
    esac;
    __git_complete_file
}
_git_merge () 
{ 
    __git_complete_strategy && return;
    case "$cur" in 
        --*)
            __gitcomp_builtin merge;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_merge_base () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin merge-base;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_mergetool () 
{ 
    case "$cur" in 
        --tool=*)
            __gitcomp "$__git_mergetools_common tortoisemerge" "" "${cur##--tool=}";
            return
        ;;
        --*)
            __gitcomp "--tool= --tool-help --prompt --no-prompt --gui --no-gui";
            return
        ;;
    esac
}
_git_mv () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin mv;
            return
        ;;
    esac;
    if [ $(__git_count_arguments "mv") -gt 0 ]; then
        __git_complete_index_file "--cached --others --directory";
    else
        __git_complete_index_file "--cached";
    fi
}
_git_notes () 
{ 
    local subcommands='add append copy edit get-ref list merge prune remove show';
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    case "$subcommand,$cur" in 
        ,--*)
            __gitcomp_builtin notes
        ;;
        ,*)
            case "$prev" in 
                --ref)
                    __git_complete_refs
                ;;
                *)
                    __gitcomp "$subcommands --ref"
                ;;
            esac
        ;;
        *,--reuse-message=* | *,--reedit-message=*)
            __git_complete_refs --cur="${cur#*=}"
        ;;
        *,--*)
            __gitcomp_builtin notes_$subcommand
        ;;
        prune,* | get-ref,*)

        ;;
        *)
            case "$prev" in 
                -m | -F)

                ;;
                *)
                    __git_complete_refs
                ;;
            esac
        ;;
    esac
}
_git_pull () 
{ 
    __git_complete_strategy && return;
    case "$cur" in 
        --recurse-submodules=*)
            __gitcomp "$__git_fetch_recurse_submodules" "" "${cur##--recurse-submodules=}";
            return
        ;;
        --*)
            __gitcomp_builtin pull;
            return
        ;;
    esac;
    __git_complete_remote_or_refspec
}
_git_push () 
{ 
    case "$prev" in 
        --repo)
            __gitcomp_nl "$(__git_remotes)";
            return
        ;;
        --recurse-submodules)
            __gitcomp "$__git_push_recurse_submodules";
            return
        ;;
    esac;
    case "$cur" in 
        --repo=*)
            __gitcomp_nl "$(__git_remotes)" "" "${cur##--repo=}";
            return
        ;;
        --recurse-submodules=*)
            __gitcomp "$__git_push_recurse_submodules" "" "${cur##--recurse-submodules=}";
            return
        ;;
        --force-with-lease=*)
            __git_complete_force_with_lease "${cur##--force-with-lease=}";
            return
        ;;
        --*)
            __gitcomp_builtin push;
            return
        ;;
    esac;
    __git_complete_remote_or_refspec
}
_git_range_diff () 
{ 
    case "$cur" in 
        --*)
            __gitcomp "
			--creation-factor= --no-dual-color
			$__git_diff_common_options
		";
            return
        ;;
    esac;
    __git_complete_revlist
}
_git_rebase () 
{ 
    __git_find_repo_path;
    if [ -f "$__git_repo_path"/rebase-merge/interactive ]; then
        __gitcomp "$__git_rebase_interactive_inprogress_options";
        return;
    else
        if [ -d "$__git_repo_path"/rebase-apply ] || [ -d "$__git_repo_path"/rebase-merge ]; then
            __gitcomp "$__git_rebase_inprogress_options";
            return;
        fi;
    fi;
    __git_complete_strategy && return;
    case "$cur" in 
        --whitespace=*)
            __gitcomp "$__git_whitespacelist" "" "${cur##--whitespace=}";
            return
        ;;
        --onto=*)
            __git_complete_refs --cur="${cur##--onto=}";
            return
        ;;
        --*)
            __gitcomp_builtin rebase "" "$__git_rebase_interactive_inprogress_options";
            return
        ;;
    esac;
    __git_complete_refs
}
_git_reflog () 
{ 
    local subcommands subcommand;
    __git_resolve_builtins "reflog";
    subcommands="$___git_resolved_builtins";
    subcommand="$(__git_find_subcommand "$subcommands" "show")";
    case "$subcommand,$cur" in 
        show,--*)
            __gitcomp "
			$__git_log_common_options
			";
            return
        ;;
        $subcommand,--*)
            __gitcomp_builtin "reflog_$subcommand";
            return
        ;;
    esac;
    __git_complete_refs;
    if [ $((cword - __git_cmd_idx)) -eq 1 ]; then
        __gitcompappend "$subcommands" "" "$cur" " ";
    fi
}
_git_remote () 
{ 
    local subcommands="
		add rename remove set-head set-branches
		get-url set-url show prune update
		";
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    if [ -z "$subcommand" ]; then
        case "$cur" in 
            --*)
                __gitcomp_builtin remote
            ;;
            *)
                __gitcomp "$subcommands"
            ;;
        esac;
        return;
    fi;
    case "$subcommand,$cur" in 
        add,--*)
            __gitcomp_builtin remote_add
        ;;
        add,*)

        ;;
        set-head,--*)
            __gitcomp_builtin remote_set-head
        ;;
        set-branches,--*)
            __gitcomp_builtin remote_set-branches
        ;;
        set-head,* | set-branches,*)
            __git_complete_remote_or_refspec
        ;;
        update,--*)
            __gitcomp_builtin remote_update
        ;;
        update,*)
            __gitcomp "$(__git_remotes) $(__git_get_config_variables "remotes")"
        ;;
        set-url,--*)
            __gitcomp_builtin remote_set-url
        ;;
        get-url,--*)
            __gitcomp_builtin remote_get-url
        ;;
        prune,--*)
            __gitcomp_builtin remote_prune
        ;;
        *)
            __gitcomp_nl "$(__git_remotes)"
        ;;
    esac
}
_git_replace () 
{ 
    case "$cur" in 
        --format=*)
            __gitcomp "short medium long" "" "${cur##--format=}";
            return
        ;;
        --*)
            __gitcomp_builtin replace;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_rerere () 
{ 
    local subcommands="clear forget diff remaining status gc";
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    if test -z "$subcommand"; then
        __gitcomp "$subcommands";
        return;
    fi
}
_git_reset () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --*)
            __gitcomp_builtin reset;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_restore () 
{ 
    case "$prev" in 
        -s)
            __git_complete_refs;
            return
        ;;
    esac;
    case "$cur" in 
        --conflict=*)
            __gitcomp "diff3 merge zdiff3" "" "${cur##--conflict=}"
        ;;
        --source=*)
            __git_complete_refs --cur="${cur##--source=}"
        ;;
        --*)
            __gitcomp_builtin restore
        ;;
        *)
            if __git_pseudoref_exists HEAD; then
                __git_complete_index_file "--modified";
            fi
        ;;
    esac
}
_git_revert () 
{ 
    if __git_pseudoref_exists REVERT_HEAD; then
        __gitcomp "$__git_revert_inprogress_options";
        return;
    fi;
    __git_complete_strategy && return;
    case "$cur" in 
        --*)
            __gitcomp_builtin revert "" "$__git_revert_inprogress_options";
            return
        ;;
    esac;
    __git_complete_refs
}
_git_rm () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin rm;
            return
        ;;
    esac;
    __git_complete_index_file "--cached"
}
_git_send_email () 
{ 
    case "$prev" in 
        --to | --cc | --bcc | --from)
            __gitcomp "$(__git send-email --dump-aliases)";
            return
        ;;
    esac;
    case "$cur" in 
        --confirm=*)
            __gitcomp "
			$__git_send_email_confirm_options
			" "" "${cur##--confirm=}";
            return
        ;;
        --suppress-cc=*)
            __gitcomp "
			$__git_send_email_suppresscc_options
			" "" "${cur##--suppress-cc=}";
            return
        ;;
        --smtp-encryption=*)
            __gitcomp "ssl tls" "" "${cur##--smtp-encryption=}";
            return
        ;;
        --thread=*)
            __gitcomp "
			deep shallow
			" "" "${cur##--thread=}";
            return
        ;;
        --to=* | --cc=* | --bcc=* | --from=*)
            __gitcomp "$(__git send-email --dump-aliases)" "" "${cur#--*=}";
            return
        ;;
        --*)
            __gitcomp_builtin send-email "$__git_format_patch_extra_options";
            return
        ;;
    esac;
    __git_complete_revlist
}
_git_shortlog () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --*)
            __gitcomp "
			$__git_log_common_options
			$__git_log_shortlog_options
			--numbered --summary --email
			";
            return
        ;;
    esac;
    __git_complete_revlist
}
_git_show () 
{ 
    __git_has_doubledash && return;
    case "$cur" in 
        --pretty=* | --format=*)
            __gitcomp "$__git_log_pretty_formats $(__git_pretty_aliases)
			" "" "${cur#*=}";
            return
        ;;
        --diff-algorithm=*)
            __gitcomp "$__git_diff_algorithms" "" "${cur##--diff-algorithm=}";
            return
        ;;
        --submodule=*)
            __gitcomp "$__git_diff_submodule_formats" "" "${cur##--submodule=}";
            return
        ;;
        --color-moved=*)
            __gitcomp "$__git_color_moved_opts" "" "${cur##--color-moved=}";
            return
        ;;
        --color-moved-ws=*)
            __gitcomp "$__git_color_moved_ws_opts" "" "${cur##--color-moved-ws=}";
            return
        ;;
        --ws-error-highlight=*)
            __gitcomp "$__git_ws_error_highlight_opts" "" "${cur##--ws-error-highlight=}";
            return
        ;;
        --diff-merges=*)
            __gitcomp "$__git_diff_merges_opts" "" "${cur##--diff-merges=}";
            return
        ;;
        --*)
            __gitcomp "--pretty= --format= --abbrev-commit --no-abbrev-commit
			--oneline --show-signature
			--expand-tabs --expand-tabs= --no-expand-tabs
			$__git_log_show_options
			$__git_diff_common_options
			";
            return
        ;;
    esac;
    __git_complete_revlist_file
}
_git_show_branch () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin show-branch;
            return
        ;;
    esac;
    __git_complete_revlist
}
_git_sparse_checkout () 
{ 
    local subcommands="list init set disable add reapply";
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    local using_cone=true;
    if [ -z "$subcommand" ]; then
        __gitcomp "$subcommands";
        return;
    fi;
    case "$subcommand,$cur" in 
        *,--*)
            __gitcomp_builtin sparse-checkout_$subcommand "" "--"
        ;;
        set,* | add,*)
            if [[ "$(__git config core.sparseCheckout)" == "true" && "$(__git config core.sparseCheckoutCone)" == "false" && -z "$(__git_find_on_cmdline --cone)" ]]; then
                using_cone=false;
            fi;
            if [[ -n "$(__git_find_on_cmdline --no-cone)" ]]; then
                using_cone=false;
            fi;
            if [[ "$using_cone" == "true" ]]; then
                __gitcomp_directories;
            else
                __gitcomp_slash_leading_paths;
            fi
        ;;
    esac
}
_git_stage () 
{ 
    _git_add
}
_git_stash () 
{ 
    local subcommands='push list show apply clear drop pop create branch';
    local subcommand="$(__git_find_on_cmdline "$subcommands save")";
    if [ -z "$subcommand" ]; then
        case "$((cword - __git_cmd_idx)),$cur" in 
            *,--*)
                __gitcomp_builtin stash_push
            ;;
            1,sa*)
                __gitcomp "save"
            ;;
            1,*)
                __gitcomp "$subcommands"
            ;;
        esac;
        return;
    fi;
    case "$subcommand,$cur" in 
        list,--*)
            __gitcomp_builtin stash_list "$__git_log_common_options $__git_diff_common_options"
        ;;
        show,--*)
            __gitcomp_builtin stash_show "$__git_diff_common_options"
        ;;
        *,--*)
            __gitcomp_builtin "stash_$subcommand"
        ;;
        branch,*)
            if [ $cword -eq $((__git_cmd_idx+2)) ]; then
                __git_complete_refs;
            else
                __gitcomp_nl "$(__git stash list | sed -n -e 's/:.*//p')";
            fi
        ;;
        show,* | apply,* | drop,* | pop,*)
            __gitcomp_nl "$(__git stash list | sed -n -e 's/:.*//p')"
        ;;
    esac
}
_git_status () 
{ 
    local complete_opt;
    local untracked_state;
    case "$cur" in 
        --ignore-submodules=*)
            __gitcomp "none untracked dirty all" "" "${cur##--ignore-submodules=}";
            return
        ;;
        --untracked-files=*)
            __gitcomp "$__git_untracked_file_modes" "" "${cur##--untracked-files=}";
            return
        ;;
        --column=*)
            __gitcomp "
			always never auto column row plain dense nodense
			" "" "${cur##--column=}";
            return
        ;;
        --*)
            __gitcomp_builtin status;
            return
        ;;
    esac;
    untracked_state="$(__git_get_option_value "-u" "--untracked-files=" "$__git_untracked_file_modes" "status.showUntrackedFiles")";
    case "$untracked_state" in 
        no)
            complete_opt=
        ;;
        all | normal | *)
            complete_opt="--cached --directory --no-empty-directory --others";
            if [ -n "$(__git_find_on_cmdline "--ignored")" ]; then
                complete_opt="$complete_opt --ignored --exclude=*";
            fi
        ;;
    esac;
    __git_complete_index_file "$complete_opt"
}
_git_submodule () 
{ 
    __git_has_doubledash && return;
    local subcommands="add status init deinit update set-branch set-url summary foreach sync absorbgitdirs";
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    if [ -z "$subcommand" ]; then
        case "$cur" in 
            --*)
                __gitcomp "--quiet"
            ;;
            *)
                __gitcomp "$subcommands"
            ;;
        esac;
        return;
    fi;
    case "$subcommand,$cur" in 
        add,--*)
            __gitcomp "--branch --force --name --reference --depth"
        ;;
        status,--*)
            __gitcomp "--cached --recursive"
        ;;
        deinit,--*)
            __gitcomp "--force --all"
        ;;
        update,--*)
            __gitcomp "
			--init --remote --no-fetch
			--recommend-shallow --no-recommend-shallow
			--force --rebase --merge --reference --depth --recursive --jobs
		"
        ;;
        set-branch,--*)
            __gitcomp "--default --branch"
        ;;
        summary,--*)
            __gitcomp "--cached --files --summary-limit"
        ;;
        foreach,--* | sync,--*)
            __gitcomp "--recursive"
        ;;
        *)

        ;;
    esac
}
_git_svn () 
{ 
    local subcommands="
		init fetch clone rebase dcommit log find-rev
		set-tree commit-diff info create-ignore propget
		proplist show-ignore show-externals branch tag blame
		migrate mkdirs reset gc
		";
    local subcommand="$(__git_find_on_cmdline "$subcommands")";
    if [ -z "$subcommand" ]; then
        __gitcomp "$subcommands";
    else
        local remote_opts="--username= --config-dir= --no-auth-cache";
        local fc_opts="
			--follow-parent --authors-file= --repack=
			--no-metadata --use-svm-props --use-svnsync-props
			--log-window-size= --no-checkout --quiet
			--repack-flags --use-log-author --localtime
			--add-author-from
			--recursive
			--ignore-paths= --include-paths= $remote_opts
			";
        local init_opts="
			--template= --shared= --trunk= --tags=
			--branches= --stdlayout --minimize-url
			--no-metadata --use-svm-props --use-svnsync-props
			--rewrite-root= --prefix= $remote_opts
			";
        local cmt_opts="
			--edit --rmdir --find-copies-harder --copy-similarity=
			";
        case "$subcommand,$cur" in 
            fetch,--*)
                __gitcomp "--revision= --fetch-all $fc_opts"
            ;;
            clone,--*)
                __gitcomp "--revision= $fc_opts $init_opts"
            ;;
            init,--*)
                __gitcomp "$init_opts"
            ;;
            dcommit,--*)
                __gitcomp "
				--merge --strategy= --verbose --dry-run
				--fetch-all --no-rebase --commit-url
				--revision --interactive $cmt_opts $fc_opts
				"
            ;;
            set-tree,--*)
                __gitcomp "--stdin $cmt_opts $fc_opts"
            ;;
            create-ignore,--* | propget,--* | proplist,--* | show-ignore,--* | show-externals,--* | mkdirs,--*)
                __gitcomp "--revision="
            ;;
            log,--*)
                __gitcomp "
				--limit= --revision= --verbose --incremental
				--oneline --show-commit --non-recursive
				--authors-file= --color
				"
            ;;
            rebase,--*)
                __gitcomp "
				--merge --verbose --strategy= --local
				--fetch-all --dry-run $fc_opts
				"
            ;;
            commit-diff,--*)
                __gitcomp "--message= --file= --revision= $cmt_opts"
            ;;
            info,--*)
                __gitcomp "--url"
            ;;
            branch,--*)
                __gitcomp "--dry-run --message --tag"
            ;;
            tag,--*)
                __gitcomp "--dry-run --message"
            ;;
            blame,--*)
                __gitcomp "--git-format"
            ;;
            migrate,--*)
                __gitcomp "
				--config-dir= --ignore-paths= --minimize
				--no-auth-cache --username=
				"
            ;;
            reset,--*)
                __gitcomp "--revision= --parent"
            ;;
            *)

            ;;
        esac;
    fi
}
_git_switch () 
{ 
    local dwim_opt="$(__git_checkout_default_dwim_mode)";
    case "$prev" in 
        -c | -C | --orphan)
            __git_complete_refs $dwim_opt --mode="heads";
            return
        ;;
        *)

        ;;
    esac;
    case "$cur" in 
        --conflict=*)
            __gitcomp "diff3 merge zdiff3" "" "${cur##--conflict=}"
        ;;
        --*)
            __gitcomp_builtin switch
        ;;
        *)
            if [ -n "$(__git_find_on_cmdline "--orphan")" ]; then
                return;
            fi;
            if [ -n "$(__git_find_on_cmdline "-c -C -d --detach")" ]; then
                __git_complete_refs --mode="refs";
            else
                if [ -n "$(__git_find_on_cmdline "-t --track")" ]; then
                    __git_complete_refs --mode="remote-heads";
                else
                    __git_complete_refs $dwim_opt --mode="heads";
                fi;
            fi
        ;;
    esac
}
_git_symbolic_ref () 
{ 
    case "$cur" in 
        --*)
            __gitcomp_builtin symbolic-ref;
            return
        ;;
    esac;
    __git_complete_refs
}
_git_tag () 
{ 
    local i c="$__git_cmd_idx" f=0;
    while [ $c -lt $cword ]; do
        i="${words[c]}";
        case "$i" in 
            -d | --delete | -v | --verify)
                __gitcomp_direct "$(__git_tags "" "$cur" " ")";
                return
            ;;
            -f)
                f=1
            ;;
        esac;
        ((c++));
    done;
    case "$prev" in 
        -m | -F)

        ;;
        -* | tag)
            if [ $f = 1 ]; then
                __gitcomp_direct "$(__git_tags "" "$cur" " ")";
            fi
        ;;
        *)
            __git_complete_refs
        ;;
    esac;
    case "$cur" in 
        --*)
            __gitcomp_builtin tag
        ;;
    esac
}
_git_whatchanged () 
{ 
    _git_log
}
_git_worktree () 
{ 
    local subcommands="add list lock move prune remove unlock";
    local subcommand subcommand_idx;
    subcommand="$(__git_find_on_cmdline --show-idx "$subcommands")";
    subcommand_idx="${subcommand% *}";
    subcommand="${subcommand#* }";
    case "$subcommand,$cur" in 
        ,*)
            __gitcomp "$subcommands"
        ;;
        *,--*)
            __gitcomp_builtin worktree_$subcommand
        ;;
        add,*)
            case "$prev" in 
                -b | -B)
                    __git_complete_refs
                ;;
                -*)

                ;;
                *)
                    if [ $cword -eq $((subcommand_idx+1)) ]; then
                        :;
                    else
                        case "${words[cword-2]}" in 
                            -b | -B)

                            ;;
                            *)
                                __git_complete_refs
                            ;;
                        esac;
                    fi
                ;;
            esac
        ;;
        lock,* | remove,* | unlock,*)
            __git_complete_worktree_paths
        ;;
        move,*)
            if [ $cword -eq $((subcommand_idx+1)) ]; then
                __git_complete_worktree_paths;
            else
                :;
            fi
        ;;
    esac
}
profile_d () 
{ 
    local file=;
    for file in $(export LC_COLLATE=C; echo /etc/profile.d/*.$1);
    do
        [ -e "${file}" ] && . "${file}";
    done;
    if [ -n "${MINGW_MOUNT_POINT}" ]; then
        for file in $(export LC_COLLATE=C; echo ${MINGW_MOUNT_POINT}/etc/profile.d/*.$1);
        do
            [ -e "${file}" ] && . "${file}";
        done;
    fi
}
